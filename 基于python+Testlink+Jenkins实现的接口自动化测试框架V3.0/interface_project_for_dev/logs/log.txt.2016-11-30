2016-11-30 19:31:39,392 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2016-11-30 19:31:39,394 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2016-11-30 19:31:39,394 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:39,394 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:39,394 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:31:39",step_action="{'url': '/goods/plist', '方法': 'post', '参数': {'orderBy': '', 'name': '', 'cateIds': '', 'page_size': '10', 'serial': '10549840601068216320', 'page_no': '1'}}", expected_results="{'检查': 'BODY', '匹配规则': '包含字符串', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:39,397 testcase.py[line: 158] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2016-11-30 19:31:39,397 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:39,397 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:39" WHERE executed_history_id = 20161130193112 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:39,513 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2016-11-30 19:31:39,817 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-免费领取优惠券', 'full_tc_external_id': 'wecharno-12', 'tc_external_id': '12', 'is_open': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'id': '127', 'testsuite_id': '125', 'updater_id': '1', 'modification_ts': '2016-11-29 19:43:22', 'active': '1', 'testcase_id': '126', 'creation_ts': '2016-07-26 15:06:38', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '', 'id': '181', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '', 'id': '180', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'id': '128', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:40,133 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:40,133 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:31:40,177 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2016-11-30 19:31:40,178 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2016-11-30 19:31:40,178 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:31:40,178 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:31:40,178 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:40,179 mydb.py[line: 70] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2016-11-30 19:31:40,654 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:40,654 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:31:40",step_action="{'更新': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '步骤类型': '执行SQl', '参数': ('40758966216286146560',)}", expected_results="" WHERE executed_history_id = 20161130193112 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:40,662 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2016-11-30 19:31:40,663 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:31:40,663 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:40,663 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '')
2016-11-30 19:31:40,666 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:31:40,666 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:40,667 mydb.py[line: 70] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2016-11-30 19:31:40,673 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:40,673 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:31:40",step_action="{'更新': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '步骤类型': '执行sql', '参数': (40758966216286146560,)}", expected_results="" WHERE executed_history_id = 20161130193112 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:40,678 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2016-11-30 19:31:40,678 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2016-11-30 19:31:40,679 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:40,679 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '')
2016-11-30 19:31:40,680 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:31:40,681 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:31:40,681 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:40,681 casestep.py[line: 127] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:31:40,681 casestep.py[line: 136] INFO: 转换后的参数体为：/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:31:40,682 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:31:40,682 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:31:40,682 httpprotocol.py[line: 75] INFO: 参数为：b''
2016-11-30 19:31:40,682 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:31:41,863 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:41,863 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"code":"4001","reason":null,"result":null,"getByWeixin":false,"cardCode":"811799300426","couponWeiXinCustomerId":135634,"jsapi":null,"couponWeixinCustomers":null,"weixinVersion":null,"cardPreprintLogId":null,"jssdk":null,"cwc":{"id":135634,"cw":{"id":1421,"shop":{"id":42,"serial":"10549840601068216320","parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":"深圳云移","logoUrl":"upload/image/2016/10/26/1de0a376-5315-4191-b577-c459edbb1ee1.jpg","printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"cardId":null,"cardType":"cash","baseInfo":{"id":2001,"frontImageUrl":"http://res.yunnex.com/saofu/coupon/11.png","appid":null,"codeType":2,"title":"接口-代金券","subTitle":"","color":"509fc9","notice":"接口自动化测试专用，烦请勿动","servicePhone":"07556644511","description":"接口自动化测试专用，烦请勿动，勿修改，勿下架","useLimit":1,"getLimit":null,"dateInfoType":1,"dateInfoBeginTimestamp":1469721600000,"dateInfoEndTimestamp":1517328000000,"dateInfoBeginTimestampStr":null,"dateInfoEndTimestampStr":null,"dateInfoFixedTerm":null,"fixedBeginTerm":null,"skuQuantity":1000,"getInType":3,"serial":"40758966216286146560","cardType":1,"listing":1,"canShare":false,"fitAll":true,"coverShow":null,"shopId":42,"checkPass":null,"modifyTime":null,"cardId":null,"couponId":null,"price":null,"allowedScope":"ONLINE","detailImgUrl":"upload/file/2016/09/14/ed0d5ffa-fd1b-46b8-8b9e-236cd9732eda.jpeg","detailTxt":"文字描述","backGroundPicUrl":null,"timeLimitList":[],"cardCouponCardType":null,"gift":null,"cashLeastCost":null,"cashReduceCost":null,"discount":null,"masterCardId":null},"generalCouponDefaultDetail":"","grouponDealDetail":null,"gift":"","cashLeastCost":2,"cashReduceCost":1,"discount":0,"createTime":1469786621000,"checkPass":-1,"delFlag":null,"modifyTime":null,"coverShow":null,"isGoodsCoupon":null,"changeStock":null,"batchVerifyLimit":1,"cashOverlay":true},"customer":{"id":167020,"channel":1,"channelSerial":"ous64uFCCLMyXYDJ-MkNilyCI5CY","shopId":42,"createTime":1477636412000,"mobile":"17817738178","name":"fuyu","sex":1,"weixinNickname":"MrLai","headImgUrl":"http://wx.qlogo.cn/mmopen/JZnr5tqrZvdT3tvbobWgCKXdkUvJnaPrL5qs8HxWruHVzmvMj7NciamlgTP89ibKaGoLpxcW3el6Xs2Wrib8ovicSgPIZ6Kmk1UQ/0","lastUpdateTime":1480505505597,"customerGroupId":100,"groupName":null,"province":"广东","city":"深圳","subscribeTime":1477391385000,"balance":null,"bonus":null,"memberCount":null,"handoutStatus":null,"registerTime":1477636535000,"activeTime":null,"member":true},"serial":"811799300426","createTime":1480505506221,"getedSync":null,"channel":-1,"branchId":-1,"operatorId":0,"lakeUserId":null,"effectTime":null,"expireTime":null,"status":null,"baseInfo":null},"serialList":null,"success":true}
2016-11-30 19:31:41,863 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:31:41,863 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:41,863 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：success":true
2016-11-30 19:31:41,864 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:41,864 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:41,864 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:31:40",step_action="{'url': '/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY', '方法': 'post', '参数': ''}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'模式': 'success':true', '消息': 'success不为ture,领取卡券失败'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 126 AND step_id = 128 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:41,871 testcase.py[line: 158] INFO: 测试用例[id=126, name=test-n-免费领取优惠券]执行成功
2016-11-30 19:31:41,871 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:41,871 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:40" WHERE executed_history_id = 20161130193112 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:42,023 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2016-11-30 19:31:42,304 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'full_tc_external_id': 'wecharno-9', 'tc_external_id': '9', 'is_open': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'id': '111', 'testsuite_id': '109', 'updater_id': '1', 'modification_ts': '2016-07-29 17:13:06', 'active': '0', 'testcase_id': '110', 'creation_ts': '2016-07-22 14:48:17', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'id': '112', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'id': '119', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '2', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:42,420 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:42,421 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:31:42,422 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2016-11-30 19:31:42,422 testcase.py[line: 27] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2016-11-30 19:31:42,422 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:42,422 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2016-11-30 19:31:42" WHERE executed_history_id = 20161130193112 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:42,541 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2016-11-30 19:31:42,693 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-把商品加入购物车', 'full_tc_external_id': 'wecharno-4', 'tc_external_id': '4', 'is_open': '1', 'summary': '', 'id': '89', 'testsuite_id': '87', 'updater_id': '1', 'modification_ts': '2016-11-29 17:58:09', 'active': '1', 'testcase_id': '88', 'creation_ts': '2016-07-20 12:07:40', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'id': '175', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '', 'id': '174', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '90', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'id': '176', 'active': '1', 'execution_type': '1', 'step_number': '4', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '177', 'active': '1', 'execution_type': '1', 'step_number': '5', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:42,841 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:42,842 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:31:42,844 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2016-11-30 19:31:42,844 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2016-11-30 19:31:42,844 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2016-11-30 19:31:42,844 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:42,844 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '')
2016-11-30 19:31:42,846 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:31:42,846 casestep.py[line: 127] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:31:42,846 casestep.py[line: 136] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2016-11-30 19:31:42,847 mydb.py[line: 84] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2016-11-30 19:31:42,850 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2016-11-30 19:31:42,851 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:31:42,851 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}, {'strIds': 18634}]
2016-11-30 19:31:42,851 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:42,851 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:31:42",step_action="{'步骤类型': '执行sql', '单条查询': 'SELECT id FROM customer WHERE channel_serial=%s', '参数': ('ous64uFCCLMyXYDJ-MkNilyCI5CY',)}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:42,855 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2016-11-30 19:31:42,855 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:31:42,855 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:42,855 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '')
2016-11-30 19:31:42,857 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:31:42,857 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:31:42,857 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,)
2016-11-30 19:31:42,857 mydb.py[line: 70] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2016-11-30 19:31:42,861 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:42,861 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:31:42",step_action="{'更新': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '步骤类型': '执行sql', '参数': (167020,)}", expected_results="" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:42,865 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2016-11-30 19:31:42,866 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2016-11-30 19:31:42,866 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:42,866 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '')
2016-11-30 19:31:42,868 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:31:42,868 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:31:42,868 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:31:42,868 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:31:42,869 casestep.py[line: 102] INFO: 转换后的参数体为：{'mallGoodsId': 26838, 'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'standardId': 'undefined', 'amount': 1}
2016-11-30 19:31:42,869 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:42,869 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:31:42,869 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2016-11-30 19:31:42,869 httpprotocol.py[line: 75] INFO: 参数为：b'mallGoodsId=26838&serial=10549840601068216320&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&standardId=undefined&amount=1'
2016-11-30 19:31:42,869 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:31:43,447 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:43,448 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":1}
2016-11-30 19:31:43,448 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:45 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:31:43,448 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:43,448 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2016-11-30 19:31:43,448 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：True
2016-11-30 19:31:43,448 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:43,448 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:43,449 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:31:42",step_action="{'url': '/addtocart', '方法': 'post', '参数': {'mallGoodsId': 26838, 'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'standardId': 'undefined', 'amount': 1}}", expected_results="{'检查': 'body', '匹配规则': '键值相等', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:43,452 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}
2016-11-30 19:31:43,452 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"strIds":1}}
2016-11-30 19:31:43,452 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:43,453 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 176, 4, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}', '{"检查":"body","输出":{"strIds":1}}', 'Block', '', '')
2016-11-30 19:31:43,456 testcase.py[line: 77] INFO: 开始执行步骤操作[第4步]
2016-11-30 19:31:43,456 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:31:43,456 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,1)
2016-11-30 19:31:43,456 mydb.py[line: 84] INFO: query：SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1  data：(167020, 1)
2016-11-30 19:31:43,459 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(18635,), flag:True
2016-11-30 19:31:43,459 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:31:43,459 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}, {'strIds': 18634}, {'strIds': 18635}]
2016-11-30 19:31:43,459 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:43,459 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:31:43",step_action="{'步骤类型': '执行sql', '单条查询': 'SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1', '参数': (167020, 1)}", expected_results="{'检查': 'body', '输出': {'strIds': 1}}" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND step_id = 176 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:43,462 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:31:43,462 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"amount\":1","消息":"购物车中商品总数错误"}, {"模式":"\"id\":26838","消息":"购物车中商品缺失"}]}
2016-11-30 19:31:43,462 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:43,462 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 177, 5, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"amount\\":1","消息":"购物车中商品总数错误"}, {"模式":"\\"id\\":26838","消息":"购物车中商品缺失"}]}', 'Block', '', '')
2016-11-30 19:31:43,463 testcase.py[line: 77] INFO: 开始执行步骤操作[第5步]
2016-11-30 19:31:43,463 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:31:43,463 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:31:43,463 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:31:43,464 casestep.py[line: 102] INFO: 转换后的参数体为：{'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'serial': '10549840601068216320'}
2016-11-30 19:31:43,464 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:43,464 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:31:43,464 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&serial=10549840601068216320
2016-11-30 19:31:43,464 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:31:43,538 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:43,538 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": [{"id":18635,"customer":null,"mallGoods":{"id":26838,"name":"接口-测试商品1","privateSerial":null,"price":1,"oriPrice":0,"description":"接口测试专用,烦请勿删,勿操作","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg,","shop":null,"shopId":null,"mallGoodsCate":null,"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},"mallGoodsStandard":null,"amount":1,"shop":null,"shopBranchId":null,"closed":null,"cateringType":null}]
2016-11-30 19:31:43,538 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:45 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:31:43,539 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:43,539 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："amount":1
2016-11-30 19:31:43,539 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："id":26838
2016-11-30 19:31:43,539 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:43,540 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:43,541 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:31:43",step_action="{'url': '/cartlist?', '方法': 'get', '参数': {'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'serial': '10549840601068216320'}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'模式': ''amount':1', '消息': '购物车中商品总数错误'}, {'模式': ''id':26838', '消息': '购物车中商品缺失'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND step_id = 177 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:43,547 testcase.py[line: 158] INFO: 测试用例[id=88, name=test-n-把商品加入购物车]执行成功
2016-11-30 19:31:43,547 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:43,548 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:42" WHERE executed_history_id = 20161130193112 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:43,696 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2016-11-30 19:31:43,997 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-查看购物车商品列表', 'full_tc_external_id': 'wecharno-6', 'tc_external_id': '6', 'is_open': '1', 'summary': '', 'id': '99', 'testsuite_id': '97', 'updater_id': '1', 'modification_ts': '2016-11-29 18:13:45', 'active': '1', 'testcase_id': '98', 'creation_ts': '2016-07-20 15:50:42', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '101', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:44,162 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:44,163 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:31:44,164 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2016-11-30 19:31:44,164 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:31:44,164 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2016-11-30 19:31:44,164 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:44,164 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '')
2016-11-30 19:31:44,165 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:31:44,165 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:31:44,166 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:31:44,166 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:31:44,166 casestep.py[line: 102] INFO: 转换后的参数体为：{'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'serial': '10549840601068216320'}
2016-11-30 19:31:44,166 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:44,166 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:31:44,166 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?openId=ous64uFCCLMyXYDJ-MkNilyCI5CY&serial=10549840601068216320
2016-11-30 19:31:44,166 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:31:44,221 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:44,221 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": [{"id":18635,"customer":null,"mallGoods":{"id":26838,"name":"接口-测试商品1","privateSerial":null,"price":1,"oriPrice":0,"description":"接口测试专用,烦请勿删,勿操作","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg,","shop":null,"shopId":null,"mallGoodsCate":null,"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},"mallGoodsStandard":null,"amount":1,"shop":null,"shopBranchId":null,"closed":null,"cateringType":null}]
2016-11-30 19:31:44,221 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:46 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:31:44,221 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:44,221 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2016-11-30 19:31:44,222 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:44,222 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:44,222 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:31:44",step_action="{'url': '/cartlist?', '方法': 'get', '参数': {'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY', 'serial': '10549840601068216320'}}", expected_results="{'检查': 'code', '匹配规则': '包含字符串', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:44,226 testcase.py[line: 158] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2016-11-30 19:31:44,226 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:44,226 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:44" WHERE executed_history_id = 20161130193112 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:44,364 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2016-11-30 19:31:44,980 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-点击商品', 'full_tc_external_id': 'wecharno-2', 'tc_external_id': '2', 'is_open': '1', 'summary': '', 'id': '81', 'testsuite_id': '79', 'updater_id': '1', 'modification_ts': '2016-11-29 18:16:14', 'active': '1', 'testcase_id': '80', 'creation_ts': '2016-07-20 11:05:03', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '82', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:45,244 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:45,244 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:31:45,297 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2016-11-30 19:31:45,298 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2016-11-30 19:31:45,298 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2016-11-30 19:31:45,298 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:45,298 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '')
2016-11-30 19:31:45,309 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:31:45,309 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:31:45,309 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:31:45,309 casestep.py[line: 102] INFO: 转换后的参数体为：{'id': 26838, 'serial': '10549840601068216320'}
2016-11-30 19:31:45,310 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:45,310 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:31:45,310 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2016-11-30 19:31:45,310 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:31:46,197 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:46,197 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=3.8.0-59cf5" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=3.8.0-59cf5">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=3.8.0-59cf5">
	<link rel="stylesheet" href="/css/malls/detail.css?v=3.8.0-59cf5">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=3.8.0-59cf5"></script>
	<script src="/common/js/request.js?v=3.8.0-59cf5"></script>
	<script src="/common/js/extend-number.js?v=3.8.0-59cf5"></script>
	<script src="/component/iscroll/js/iscroll.js?v=3.8.0-59cf5"></script>
	<script src="/component/swiper/js/swiper.min.js?v=3.8.0-59cf5"></script>
	<script src="/js/malls/detail.js?v=3.8.0-59cf5"></script>
</body>
</html>
2016-11-30 19:31:46,202 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:48 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3931'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=697EE5E70A83F4B72A2E208909982F0B; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2016-11-30 19:31:46,202 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:46,202 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2016-11-30 19:31:46,202 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:46,202 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:46,202 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:31:45",step_action="{'url': '/goods/item?', '方法': 'get', '参数': {'id': 26838, 'serial': '10549840601068216320'}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:46,205 testcase.py[line: 158] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2016-11-30 19:31:46,205 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:46,205 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:45" WHERE executed_history_id = 20161130193112 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:31:46,341 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2016-11-30 19:31:46,478 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2016-11-30 19:31:46,623 main.py[line: 131] INFO: 正在读取测项目[id：145, project：pj_pos]的协议，host，端口配置...
2016-11-30 19:31:46,623 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"https","host":"saofu.client.test.saofu.cn","port":443}
2016-11-30 19:31:46,626 main.py[line: 150] INFO: 正在执行测试项目[id：145, project：pj_pos]
2016-11-30 19:31:46,626 testproject.py[line: 23] INFO: 正在获取测试项目[id：145, name：pj_pos]对应对应的测试计划名称列表
2016-11-30 19:31:46,747 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_pos']]
2016-11-30 19:31:46,902 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_pos，testplan：plan1_of_pos]
2016-11-30 19:31:46,902 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_pos，name=plan1_of_pos]的测试用例
2016-11-30 19:31:47,127 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_pos，name=plan1_of_pos]的测试用例id：dict_keys(['152', '148'])
2016-11-30 19:31:47,316 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '', 'name': 'test-n-修改积分', 'full_tc_external_id': 'pj_pos-2', 'tc_external_id': '2', 'is_open': '1', 'summary': '', 'id': '153', 'testsuite_id': '151', 'updater_id': '1', 'modification_ts': '2016-11-30 00:19:08', 'active': '1', 'testcase_id': '152', 'creation_ts': '2016-07-28 12:10:09', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;修改积分失败&quot;}]</p>\n<p>\n\t}</p>\n', 'id': '154', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t<br />\n\t{&quot;函数&quot;：&quot;test_interface_of_json&quot;，</p>\n<p>\n\t&quot;请求头&quot;:{&quot;DeviceId&quot;:&quot;[CaseStep.device_no]&quot;, &quot;SerialNo&quot;:&quot;[CaseStep.serial_no]&quot;, &quot;Content-Type&quot;:&quot;application/json;charset=utf-8&quot;,&quot;ProductVersion&quot;:&quot;[global_product_version]&quot;,&quot;ProtocolVersion&quot;:&quot;[global_product_version]&quot;,&quot;OperatorId&quot;:&quot;[OperatorId]&quot;, &quot;Token&quot;:&quot;[Token]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/customer/customer_bonus_update_v3&quot;,<br />\n\t&quot;参数&quot;:{&quot;bonus&quot;:37593,&quot;code&quot;:&quot;17817738178&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:47,456 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:31:47,456 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 152, 'test-n-修改积分', '扫码-修改积分接口', 'plan1_of_pos', 'pj_pos', 'Block', '')
2016-11-30 19:31:47,458 testplan.py[line: 72] INFO: 开始执行测试用例[id=152，name=test-n-修改积分]
2016-11-30 19:31:47,458 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头":{"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion":"[global_product_version]","ProtocolVersion":"[global_product_version]","OperatorId":"[OperatorId]", "Token":"[Token]"},"方法":"post","url":"/saofu-client/customer/customer_bonus_update_v3","参数":{"bonus":37593,"code":"17817738178"}} 
2016-11-30 19:31:47,458 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true", "消息":"修改积分失败"}]}
2016-11-30 19:31:47,458 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:31:47,459 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193112', 152, 'test-n-修改积分', 'plan1_of_pos', 'pj_pos', 154, 1, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头":{"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion":"[global_product_version]","ProtocolVersion":"[global_product_version]","OperatorId":"[OperatorId]", "Token":"[Token]"},"方法":"post","url":"/saofu-client/customer/customer_bonus_update_v3","参数":{"bonus":37593,"code":"17817738178"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true", "消息":"修改积分失败"}]}', 'Block', '', '')
2016-11-30 19:31:47,460 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:31:47,460 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2016-11-30 19:31:47,460 casestep.py[line: 102] INFO: 转换后的参数体为：{'code': '17817738178', 'bonus': 37593}
2016-11-30 19:31:47,460 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:31:47,460 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2016-11-30 19:31:47,460 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_product_version]
2016-11-30 19:31:47,461 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[OperatorId]
2016-11-30 19:31:47,461 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2016-11-30 19:31:47,461 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[Token]
2016-11-30 19:31:47,461 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_product_version]
2016-11-30 19:31:47,461 casestep.py[line: 102] INFO: 转换后的参数体为：{'DeviceId': '182590014248006', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'OperatorId': 1318, 'SerialNo': 'HZ501FZA0F9M07D', 'Token': '40b8434c-e359-48d0-bc5d-6bfb44cd842c', 'ProtocolVersion': '3.2.12C'}
2016-11-30 19:31:47,461 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2016-11-30 19:31:47,461 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/customer/customer_bonus_update_v3
2016-11-30 19:31:47,461 httpprotocol.py[line: 75] INFO: 参数为：b'{"code": "17817738178", "bonus": 37593}'
2016-11-30 19:31:47,461 httpprotocol.py[line: 76] INFO: 请求头为：{'DeviceId': '182590014248006', 'Content-Type': 'application/json;charset=utf-8', 'ProtocolVersion': '3.2.12C', 'ProductVersion': '3.2.12C', 'SerialNo': 'HZ501FZA0F9M07D', 'Token': '40b8434c-e359-48d0-bc5d-6bfb44cd842c', 'OperatorId': 1318}
2016-11-30 19:31:48,292 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2016-11-30 19:31:48,293 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"bonus":37593,"code":"4001","success":true}
2016-11-30 19:31:48,293 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:31:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:31:48,293 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:31:48,294 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：success":true
2016-11-30 19:31:48,294 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:31:48,295 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:31:48,295 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:31:47",step_action="{'url': '/saofu-client/customer/customer_bonus_update_v3', '函数': 'test_interface_of_json', '请求头': {'DeviceId': '182590014248006', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'OperatorId': 1318, 'SerialNo': 'HZ501FZA0F9M07D', 'Token': '40b8434c-e359-48d0-bc5d-6bfb44cd842c', 'ProtocolVersion': '3.2.12C'}, '方法': 'post', '参数': {'code': '17817738178', 'bonus': 37593}}", expected_results="{'检查': 'body', '匹配规则': '包含字符串', '条件': [{'模式': 'success':true', '消息': '修改积分失败'}]}" WHERE executed_history_id = 20161130193112 AND testcase_id = 152 AND step_id = 154 AND project='pj_pos' AND testplan='plan1_of_pos'
2016-11-30 19:31:48,303 testcase.py[line: 158] INFO: 测试用例[id=152, name=test-n-修改积分]执行成功
2016-11-30 19:31:48,303 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:31:48,304 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:31:47" WHERE executed_history_id = 20161130193112 AND testcase_id = 152 AND project='pj_pos' AND testplan='plan1_of_pos'
2016-11-30 19:31:48,445 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=146, bulid_version=v1.0.0],对应用例[testcase_id=152]的执行结果
2016-11-30 19:31:48,711 testplan.py[line: 45] INFO: 获取测试用例信息 [{'updater_first_name': 'Testlink', 'version': '1', 'layout': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'name': 'test-n-登陆掌贝pos机', 'full_tc_external_id': 'pj_pos-1', 'tc_external_id': '1', 'is_open': '1', 'summary': '', 'id': '149', 'testsuite_id': '147', 'updater_id': '1', 'modification_ts': '2016-11-30 15:41:36', 'active': '1', 'testcase_id': '148', 'creation_ts': '2016-07-27 18:32:10', 'updater_last_name': 'Administrator', 'importance': '2', 'estimated_exec_duration': '', 'author_first_name': 'Testlink', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'id': '183', 'active': '1', 'execution_type': '1', 'step_number': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'id': '182', 'active': '1', 'execution_type': '1', 'step_number': '2', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'id': '150', 'active': '1', 'execution_type': '1', 'step_number': '3', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n'}], 'author_id': '1', 'execution_type': '1', 'node_order': '1000', 'updater_login': 'admin', 'status': '1', 'author_login': 'admin', 'author_last_name': 'Administrator'}]
2016-11-30 19:31:48,711 testplan.py[line: 52] INFO: 用例[id=148, name=test-n-登陆掌贝pos机]为全局初始化用例，已跳过执行
2016-11-30 19:31:48,711 testplan.py[line: 97] INFO: 测试计划[project=pj_pos ,testplan=plan1_of_pos]已执行完
2016-11-30 19:31:48,711 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2016-11-30 19:31:48,713 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2016-11-30 19:31:48,713 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20161130193112',)
2016-11-30 19:31:48,715 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2016-11-30 19:31:48,715 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20161130193112')
2016-11-30 19:31:48,717 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2016-11-30 19:31:48,717 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20161130193112')
2016-11-30 19:31:48,718 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2016-11-30 19:31:48,718 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20161130193112')
2016-11-30 19:31:48,719 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2016-11-30 19:31:48,719 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20161130193112')
2016-11-30 19:31:48,721 htmlreporter.py[line: 88] INFO: 正在查询已运的测试计划
2016-11-30 19:31:48,721 mydb.py[line: 100] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20161130193112',)
2016-11-30 19:31:48,723 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2016-11-30 19:31:48,723 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20161130193112')
2016-11-30 19:31:48,724 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2016-11-30 19:31:48,725 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2016-11-30 19:31:48,725 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20161130193112')
2016-11-30 19:31:48,729 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2016-11-30 19:31:48,730 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_pos, testplan：plan1_of_pos]的测试用例执行结果
2016-11-30 19:31:48,730 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', 'plan1_of_pos', '20161130193112')
2016-11-30 19:31:48,731 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_pos, testplan：plan1_of_pos]的测试用例运行结果到测试报告
2016-11-30 19:31:48,732 htmlreporter.py[line: 135] INFO: 正在查询已运的测试计划
2016-11-30 19:31:48,732 mydb.py[line: 100] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20161130193112',)
2016-11-30 19:31:48,733 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2016-11-30 19:31:48,733 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20161130193112')
2016-11-30 19:31:48,735 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=148]步骤运行结果
2016-11-30 19:31:48,735 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20161130193112')
2016-11-30 19:31:48,738 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2016-11-30 19:31:48,738 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20161130193112')
2016-11-30 19:31:48,740 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=120]步骤运行结果
2016-11-30 19:31:48,740 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20161130193112')
2016-11-30 19:31:48,741 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=93]步骤运行结果
2016-11-30 19:31:48,742 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20161130193112')
2016-11-30 19:31:48,744 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=88]步骤运行结果
2016-11-30 19:31:48,744 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20161130193112')
2016-11-30 19:31:48,747 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=106]步骤运行结果
2016-11-30 19:31:48,747 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20161130193112')
2016-11-30 19:31:48,749 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=114]步骤运行结果
2016-11-30 19:31:48,749 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20161130193112')
2016-11-30 19:31:48,751 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=102]步骤运行结果
2016-11-30 19:31:48,751 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20161130193112')
2016-11-30 19:31:48,754 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=76]步骤运行结果
2016-11-30 19:31:48,754 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20161130193112')
2016-11-30 19:31:48,756 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=126]步骤运行结果
2016-11-30 19:31:48,757 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20161130193112')
2016-11-30 19:31:48,759 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=110]步骤运行结果
2016-11-30 19:31:48,759 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20161130193112')
2016-11-30 19:31:48,761 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=98]步骤运行结果
2016-11-30 19:31:48,761 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20161130193112')
2016-11-30 19:31:48,763 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=80]步骤运行结果
2016-11-30 19:31:48,763 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20161130193112')
2016-11-30 19:31:48,765 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_pos, testplan：plan1_of_pos]已运行的测试用例
2016-11-30 19:31:48,765 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', 'plan1_of_pos', '20161130193112')
2016-11-30 19:31:48,766 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=152]步骤运行结果
2016-11-30 19:31:48,767 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', 'plan1_of_pos', 152, '20161130193112')
2016-11-30 19:31:48,769 htmlreporter.py[line: 207] INFO: 正在设置测试报告结果文件名
2016-11-30 19:31:48,769 htmlreporter.py[line: 217] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20161130193112.html
2016-11-30 19:31:48,769 htmlreporter.py[line: 210] INFO: 正在生成测试报告
2016-11-30 19:31:48,772 main.py[line: 265] INFO: 生成测试报告成功
2016-11-30 19:31:48,912 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20161130193112.html
2016-11-30 19:31:48,912 main.py[line: 275] INFO: 正在发送测试报告邮件...
2016-11-30 19:31:48,954 main.py[line: 279] INFO: 发送邮件成功
2016-11-30 19:33:13,370 global_var.py[line: 20] INFO: 当前运行环境：测试环境
2016-11-30 19:33:13,370 global_var.py[line: 21] INFO: 正在初始化数据库[名称：SAOFUDB1]对象
2016-11-30 19:33:13,388 global_var.py[line: 28] INFO: 正在初始化数据库[名称：TESTDB]对象
2016-11-30 19:33:13,392 global_var.py[line: 31] INFO: 正在获取testlink
2016-11-30 19:33:13,454 main.py[line: 57] INFO: 正在创建测试用例报告报表
2016-11-30 19:33:13,454 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS testcase_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testsuit varchar(40),                                          testplan varchar(40),                                          project varchar(40),                                          runresult varchar(20),                                          runtime datetime)
2016-11-30 19:33:13,456 main.py[line: 60] INFO: 正在创建测试步骤报告报表
2016-11-30 19:33:13,456 mydb.py[line: 43] INFO: query：CREATE TABLE IF NOT EXISTS case_step_report_tb                                         (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,                                          executed_history_id varchar(50) NOT NULL,                                          testcase_id int NOT NULL,                                          testcase_name varchar(40) NOT NULL,                                          testplan varchar(40) NOT NULL,                                          project varchar(40) NOT NULL,                                          step_id int,                                          step_num int NOT NULL,                                          step_action varchar(1000),                                           expected_results varchar(1000),                                          runresult varchar(10),                                          reason varchar(2000),                                          protocol_method varchar(40) ,                                          protocol varchar(40),                                          host varchar(40),                                          port int,                                          runtime datetime)
2016-11-30 19:33:13,457 main.py[line: 63] INFO: 正在读取运行模式配置
2016-11-30 19:33:13,459 main.py[line: 70] INFO: 正在运行全局初始化用例……
2016-11-30 19:33:13,459 main.py[line: 72] INFO: 待运行全局初始化用例id列表：[148]
2016-11-30 19:33:13,626 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'modification_ts': '2016-11-30 15:41:36', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'tc_external_id': '1', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-27 18:32:10', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '147', 'id': '149', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'active': '1', 'step_number': '3'}], 'active': '1'}]
2016-11-30 19:33:13,750 global_function.py[line: 39] INFO: 正在读取套件[id=147]的协议，host，端口配置...
2016-11-30 19:33:14,452 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:14,452 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 148, 'test-n-登陆掌贝pos机', '登陆接口', '无计划', 'pj_pos', 'Block', '')
2016-11-30 19:33:14,453 global_function.py[line: 71] INFO: 开始执行测试用例[id=148，name=test-n-登陆掌贝pos机]
2016-11-30 19:33:14,453 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}
2016-11-30 19:33:14,454 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"branch_id":1}}
2016-11-30 19:33:14,454 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:14,454 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 183, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT branch_id FROM account_operator WHERE id = %s","参数":"(1318,)"}', '{"检查":"body","输出":{"branch_id":1}}', 'Block', '', '')
2016-11-30 19:33:14,456 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:14,456 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:14,456 mydb.py[line: 84] INFO: query：SELECT branch_id FROM account_operator WHERE id = %s  data：(1318,)
2016-11-30 19:33:14,460 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(1485916418,), flag:True
2016-11-30 19:33:14,460 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:14,460 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}]
2016-11-30 19:33:14,460 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:14,460 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:14",step_action="{'参数': (1318,), '单条查询': 'SELECT branch_id FROM account_operator WHERE id = %s', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'branch_id': 1}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 148 AND step_id = 183 AND project='pj_pos' AND testplan='无计划'
2016-11-30 19:33:14,463 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}
2016-11-30 19:33:14,463 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"device_no":1,"serial_no":2}}
2016-11-30 19:33:14,463 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:14,463 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 182, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s","参数":"([CaseStep.branch_id],)"}', '{"检查":"body","输出":{"device_no":1,"serial_no":2}}', 'Block', '', '')
2016-11-30 19:33:14,464 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:14,464 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.branch_id]
2016-11-30 19:33:14,465 casestep.py[line: 136] INFO: 转换后的参数体为：(1485916418,)
2016-11-30 19:33:14,465 mydb.py[line: 84] INFO: query：SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s  data：(1485916418,)
2016-11-30 19:33:14,468 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:('182590014248006', 'HZ501FZA0F9M07D'), flag:True
2016-11-30 19:33:14,468 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:14,468 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}]
2016-11-30 19:33:14,469 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:14,469 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:14",step_action="{'参数': (1485916418,), '单条查询': 'SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'device_no': 1, 'serial_no': 2}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 148 AND step_id = 182 AND project='pj_pos' AND testplan='无计划'
2016-11-30 19:33:14,471 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}
2016-11-30 19:33:14,471 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}
2016-11-30 19:33:14,471 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:14,472 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 148, 'test-n-登陆掌贝pos机', '无计划', 'pj_pos', 150, 3, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头": {"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion": "[global_product_version]", "ProtocolVersion":"[global_protocol_version]"},"方法":"post","url":"/saofu-client/password/login","参数":{"id":"1318","password":"e10adc3949ba59abbe56e057f20f883e"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"登录失败,success不为true"},{"模式":{"message": "成功"},"消息":"message不为成功"},{"模式":{"code": "4001"},"消息":"code不为4001"}],"输出":{"Token":{"token":"value"},"OperatorId":{"operator":{"id":"value"}}}}', 'Block', '', '')
2016-11-30 19:33:14,472 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:33:14,473 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2016-11-30 19:33:14,473 casestep.py[line: 102] INFO: 转换后的参数体为：{'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}
2016-11-30 19:33:14,473 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:14,473 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_protocol_version]
2016-11-30 19:33:14,473 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_product_version]
2016-11-30 19:33:14,473 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2016-11-30 19:33:14,473 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2016-11-30 19:33:14,473 casestep.py[line: 102] INFO: 转换后的参数体为：{'ProtocolVersion': '4.0', 'ProductVersion': '3.2.12C', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '182590014248006', 'SerialNo': 'HZ501FZA0F9M07D'}
2016-11-30 19:33:14,474 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2016-11-30 19:33:14,474 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/password/login
2016-11-30 19:33:14,474 httpprotocol.py[line: 75] INFO: 参数为：b'{"id": "1318", "password": "e10adc3949ba59abbe56e057f20f883e"}'
2016-11-30 19:33:14,474 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '4.0', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'DeviceId': '182590014248006', 'SerialNo': 'HZ501FZA0F9M07D'}
2016-11-30 19:33:15,397 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:15,397 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"attach":["flag_appointment","flag_app_xiaoer","flag_cardcupon","flag_cash","flag_help_center","flag_info_center","flag_in_shop","flag_lake","flag_mt_wm","flag_order","flag_qrscan","flag_queue","flag_zhanggui"],"branchSerial":"cao","code":"4001","merchantKey":"10549840601068216320","message":"成功","operator":{"id":1318,"name":"接口测试","number":"1"},"reason":"成功","shopId":"1485916418","success":true,"token":"79b87bf3-1b29-498c-9586-9856899e0409"}
2016-11-30 19:33:15,397 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:17 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('EXCLUDE_ENCRYPT', 'true'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:15,397 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:15,397 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2016-11-30 19:33:15,398 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：True
2016-11-30 19:33:15,398 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['message', '成功']
2016-11-30 19:33:15,398 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：成功
2016-11-30 19:33:15,398 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['code', '4001']
2016-11-30 19:33:15,398 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：4001
2016-11-30 19:33:15,398 unittesttestcase.py[line: 225] INFO: 要提取的字典key,value层级为：['operator', 'id', 'value']
2016-11-30 19:33:15,398 unittesttestcase.py[line: 239] INFO: 找到的对应字典层级的key的值为：1318
2016-11-30 19:33:15,398 unittesttestcase.py[line: 263] INFO: 获取到的变量的值为：1318
2016-11-30 19:33:15,398 unittesttestcase.py[line: 225] INFO: 要提取的字典key,value层级为：['token', 'value']
2016-11-30 19:33:15,398 unittesttestcase.py[line: 239] INFO: 找到的对应字典层级的key的值为：79b87bf3-1b29-498c-9586-9856899e0409
2016-11-30 19:33:15,399 unittesttestcase.py[line: 263] INFO: 获取到的变量的值为：79b87bf3-1b29-498c-9586-9856899e0409
2016-11-30 19:33:15,399 unittesttestcase.py[line: 290] INFO: 提取的输出结果(key-value对)为:[{'OperatorId': 1318}, {'Token': '79b87bf3-1b29-498c-9586-9856899e0409'}]
2016-11-30 19:33:15,399 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:15,399 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:14",step_action="{'方法': 'post', '函数': 'test_interface_of_json', '请求头': {'ProtocolVersion': '4.0', 'ProductVersion': '3.2.12C', 'Content-Type': 'application/json;charset=utf-8', 'DeviceId': '182590014248006', 'SerialNo': 'HZ501FZA0F9M07D'}, '参数': {'id': '1318', 'password': 'e10adc3949ba59abbe56e057f20f883e'}, 'url': '/saofu-client/password/login'}", expected_results="{'检查': 'body', '输出': {'OperatorId': {'operator': {'id': 'value'}}, 'Token': {'token': 'value'}}, '条件': [{'模式': {'success': True}, '消息': '登录失败,success不为true'}, {'模式': {'message': '成功'}, '消息': 'message不为成功'}, {'模式': {'code': '4001'}, '消息': 'code不为4001'}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 148 AND step_id = 150 AND project='pj_pos' AND testplan='无计划'
2016-11-30 19:33:15,402 testcase.py[line: 158] INFO: 测试用例[id=148, name=test-n-登陆掌贝pos机]执行成功
2016-11-30 19:33:15,403 global_function.py[line: 75] INFO: 正在更新用例执行结果
2016-11-30 19:33:15,403 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:14" WHERE executed_history_id = 20161130193313 and testcase_id = 148 AND project='pj_pos' AND testplan='无计划'
2016-11-30 19:33:15,405 global_function.py[line: 82] INFO: 指定用例[148]已执行完
2016-11-30 19:33:15,405 main.py[line: 75] INFO: 用例[148]运行结果：('Pass', '')
2016-11-30 19:33:15,405 main.py[line: 78] INFO: 按项目运行测试
2016-11-30 19:33:15,405 main.py[line: 115] INFO: 运行指定项目
2016-11-30 19:33:15,526 main.py[line: 131] INFO: 正在读取测项目[id：73, project：pj_wechatno]的协议，host，端口配置...
2016-11-30 19:33:15,526 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"http","host":"m.test.saofu.cn","port":80} 
2016-11-30 19:33:15,528 main.py[line: 150] INFO: 正在执行测试项目[id：73, project：pj_wechatno]
2016-11-30 19:33:15,528 testproject.py[line: 23] INFO: 正在获取测试项目[id：73, name：pj_wechatno]对应对应的测试计划名称列表
2016-11-30 19:33:15,650 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_wechatno']]
2016-11-30 19:33:15,779 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_wechatno，testplan：plan1_of_wechatno]
2016-11-30 19:33:15,779 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例
2016-11-30 19:33:15,916 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_wechatno，name=plan1_of_wechatno]的测试用例id：dict_keys(['114', '106', '110', '88', '102', '98', '126', '80', '76', '93', '120'])
2016-11-30 19:33:16,042 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 17:52:17', 'full_tc_external_id': 'wecharno-10', 'name': 'test-n-提交储值卡支付订单-pay5重定向', 'updater_first_name': 'Testlink', 'testcase_id': '114', 'tc_external_id': '10', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-25 15:02:41', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '113', 'id': '115', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,<br />\n\t<br />\n\t&quot;用例id&quot;:106,<br />\n\t<br />\n\t&quot;用例名称&quot;:&quot;test-n-创建储值卡支付订单&quot;<br />\n\t}</p>\n', 'id': '116', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;确认支付&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没确认支付按钮&quot;},</p>\n<p>\n\t{&quot;模式&quot;:&quot;储值卡&quot;, &quot;消息&quot;:&quot;提交储值卡支付订单-pay5重定向失败，没打开页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;参数&quot;:{&quot;orderId&quot;:&quot;[attach_1]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '117', 'active': '1', 'step_number': '2'}], 'active': '1'}]
2016-11-30 19:33:16,182 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:16,183 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 114, 'test-n-提交储值卡支付订单-pay5重定向', '微商城-提交储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:16,184 testplan.py[line: 72] INFO: 开始执行测试用例[id=114，name=test-n-提交储值卡支付订单-pay5重定向]
2016-11-30 19:33:16,184 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}
2016-11-30 19:33:16,185 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:16,185 testcase.py[line: 50] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:16,185 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 116, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":106,"用例名称":"test-n-创建储值卡支付订单"}', '', 'Block', '', '')
2016-11-30 19:33:16,187 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:16,354 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 17:33:09', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'tc_external_id': '8', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '105', 'id': '107', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:16,502 global_function.py[line: 39] INFO: 正在读取套件[id=105]的协议，host，端口配置...
2016-11-30 19:33:16,746 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:16,746 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 106, 'test-n-创建储值卡支付订单', '创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:16,748 global_function.py[line: 71] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2016-11-30 19:33:16,748 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2016-11-30 19:33:16,748 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2016-11-30 19:33:16,748 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:16,748 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', '80', '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '')
2016-11-30 19:33:16,749 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:16,750 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:16,750 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:16,750 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:16,750 casestep.py[line: 102] INFO: 转换后的参数体为：{'fm': 1, 'amount': 1, 'remark': '', 'cartIds': '', 'serial': '10549840601068216320', 'mallGoodsId': '26838', 'fetchTime': '', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:16,750 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:16,750 casestep.py[line: 102] INFO: 转换后的参数体为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}
2016-11-30 19:33:16,750 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:16,751 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2016-11-30 19:33:16,751 httpprotocol.py[line: 75] INFO: 参数为：b'fm=1&amount=1&remark=&cartIds=&serial=10549840601068216320&mallGoodsId=26838&fetchTime=&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2016-11-30 19:33:16,751 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}
2016-11-30 19:33:20,336 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:20,338 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":"20803924869985816576"}
2016-11-30 19:33:20,338 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:22 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:20,338 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:20,338 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2016-11-30 19:33:20,339 unittesttestcase.py[line: 278] INFO: 获取到的变量的值为：['true']
2016-11-30 19:33:20,339 unittesttestcase.py[line: 278] INFO: 获取到的变量的值为：['20803924869985816576']
2016-11-30 19:33:20,339 unittesttestcase.py[line: 290] INFO: 提取的输出结果(key-value对)为:[{'OperatorId': 1318}, {'Token': '79b87bf3-1b29-498c-9586-9856899e0409'}, {'success_1': 'true'}, {'attach_1': '20803924869985816576'}]
2016-11-30 19:33:20,340 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:20,340 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:16",step_action="{'方法': 'post', '请求头': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '参数': {'fm': 1, 'amount': 1, 'remark': '', 'cartIds': '', 'serial': '10549840601068216320', 'mallGoodsId': '26838', 'fetchTime': '', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cmorder/1/4'}", expected_results="{'检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:20,345 testcase.py[line: 158] INFO: 测试用例[id=106, name=test-n-创建储值卡支付订单]执行成功
2016-11-30 19:33:20,345 global_function.py[line: 75] INFO: 正在更新用例执行结果
2016-11-30 19:33:20,345 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:16" WHERE executed_history_id = 20161130193313 and testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:20,348 global_function.py[line: 82] INFO: 指定用例[106]已执行完
2016-11-30 19:33:20,349 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:20,349 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:16",step_action="{'用例名称': 'test-n-创建储值卡支付订单', '用例id': 106, '步骤类型': '执行用例'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 114 AND step_id = 116 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:20,352 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/pay/5?","参数":{"orderId":"[attach_1]","serial":"[global_serial]"}}
2016-11-30 19:33:20,352 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"确认支付", "消息":"提交储值卡支付订单-pay5重定向失败,没确认支付按钮"},{"模式":"储值卡", "消息":"提交储值卡支付订单-pay5重定向失败,没打开页面"}]}
2016-11-30 19:33:20,352 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:20,352 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 114, 'test-n-提交储值卡支付订单-pay5重定向', 'plan1_of_wechatno', 'pj_wechatno', 117, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/pay/5?","参数":{"orderId":"[attach_1]","serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"确认支付", "消息":"提交储值卡支付订单-pay5重定向失败,没确认支付按钮"},{"模式":"储值卡", "消息":"提交储值卡支付订单-pay5重定向失败,没打开页面"}]}', 'Block', '', '')
2016-11-30 19:33:20,354 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:20,354 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:20,354 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:20,354 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[attach_1]
2016-11-30 19:33:20,355 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'orderId': '20803924869985816576'}
2016-11-30 19:33:20,355 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:20,355 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:20,355 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/pay/5?serial=10549840601068216320&orderId=20803924869985816576
2016-11-30 19:33:20,355 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:31,764 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:31,765 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 






<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=3.8.0-59cf5" />  
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <script src="/component/flexible/js/flexible.js?v=3.8.0-59cf5"></script>
        <meta name="format-detection" content="telephone=no">
        <meta http-equiv="Expires" CONTENT="0">
        <meta http-equiv="Cache-Control" CONTENT="no-cache">
        <meta http-equiv="Pragma" CONTENT="no-cache">
        <title>储值卡</title>
        <link rel="stylesheet" href="/common/css/common-pc.css?v=3.8.0-59cf5">
        <link rel="stylesheet" href="/component/flexible/css/flexible-font.css?v=3.8.0-59cf5">
        <link rel="stylesheet" type="text/css" href="/plugin/zepto/css/zepto.alert.css?v=3.8.0-59cf5">
        <link rel="stylesheet" href="/css/pay/pay.css?v=3.8.0-59cf5" />
    </head>
    <body>
        <div id="wrapper">
        	
		    	
		    	
		    		
		    		
		    		
		    		
		    		
		    		
		    		<div class="header">
		    			<div class="middle-header">
		                    <!-- 
			    				
			    				
			    					<p>深圳云移</p>
			    				
			    			 -->
                            <p class="price-key text-32">实付金额</p>
		    				
		    					
		    						<p class="price text-66">￥0.01</p>
		    						
		    					
		    					
		    				

			                <!-- <p class="warning"></p> -->
			            </div>
		            </div>
		            <div class="content text-28">


                        <div class="detail">

                            <p class="store">
                                门店名称<span class="shop-name">
                                
                                    
                                    
                                        <span>深圳云移</span>
                                    
                                
                            </p>

		                    <!-- <p>商户名称 : <span class="r-span">深圳云移</span></p>
		                    
		                    	<p>交易单号 : <span class="r-span">30803924883842273280</span></p>
		                     -->
		                    
		                    <!-- <p style="display: none">实付金额 : <span class="r-span trade-fee">0.02</span></p> -->
                            <div class="box">
                                <div class="area">
                                    <p class="order-money">订单金额 : <span class="trade-price trade-fee">0.02</span></p>
    		                        
                                </div>

                                <div class="area area-discount">
                                    
                                        
        		                    		<p class="li-top-bottom">使用优惠 :
                                                <span class="discount-value">
            		                    			<span class="youhui-name">会员折扣</span>
                                                    <span class="r-span">-￥</span>
                                                    <span class="r-span youhui-price">
                                                        0.01
                                                    </span>
                                                    
                                                        <i class='arrow'></i>
                                                    
                                                </span>
        		                    		</p>
                                            
                                        
                                    
                                    
                                    
                                        <p class="bonus" id="bonusDiv" style="display:none">
                                            积分抵现: <span class='integral-value'>
                                            <span class="trueBonus">0</span>积分抵扣￥<span class="trueFee">0.00</span>元
                                            
                                                <span class="bg-img"></span>
                                            
                                            <input type="radio" name="ka"/></span>
                                        </p>
                                    
                                </div>

                                <div class="area area-spe">
                                    <p class="paid-money">实付金额
                                        <span class="paid-value">￥
                                            
                                                
                                                    0.01
                                                    
                                                
                                            
                                            
                                        </span>
                                    </p>
                                </div>
                            </div>
		                </div>
		                <div class="contain-check">
		                	
			                
			                	
			                		<p class="ka-p cf" type="2" id="541055300425">
				                		<span class="member">使用次数测试</span>:<span class="member-num">99.05</span><span class="integral-value">
				                        <span class="bg-img"></span>
				                        <input type="radio" name="ka"/></span>
				                    </p>
			                	
			                
			                
			                	<p class="ka-p cf no2" type="1" id="" >
			                		<span class="member">会员账户</span>:
	                                <span class="member-num">0.00</span>
	                                <span class="integral-value">
			                            <span class="bg-img check-img"></span>
			                            <input type="radio" name="ka"/>
	                                </span>
			                    </p>
		                    
			                
			                	
			                
		                </div>
		            </div>
		            <div class="footer">
		                <button class="btn-a text-32">确认支付</button>
		            </div>

		            <div class="bg"></div>
		            <ul class="detail youhui">
		            	<li class="return-youhui text-30">返回</li>
		            	<li class="text-28"><a class="li-youhui-name" cardId="-1" cardType="-1" cardAmount = "0">不使用优惠</a><span class="li-youhui"></span></li>
		            	
		            		<li class="text-28">
								<a class="li-youhui-name" cardId="167020" cardType="MEMBER_CARD" cardAmount="0">会员折扣
								</a>		            			
		            			<span class="green">-￥
		            				<span class="green li-youhui">
		            					0.01
		            				</span>
		            				<span class="green li-fee-pay" style="display:none;">
		            					0.01
		            				</span>
		            			</span>
		            		</li>
		            	
		            		<li class="text-28">
								<a class="li-youhui-name" cardId="799768300427" cardType="CASH" cardAmount="1">接口-代金券
								</a>		            			
		            			<span class="green">-￥
		            				<span class="green li-youhui">
		            					0.01
		            				</span>
		            				<span class="green li-fee-pay" style="display:none;">
		            					0.01
		            				</span>
		            			</span>
		            		</li>
		            	
		            		<li class="text-28">
								<a class="li-youhui-name" cardId="590880300421" cardType="DISCOUNT" cardAmount="1">测试
								</a>		            			
		            			<span class="green">-￥
		            				<span class="green li-youhui">
		            					0.01
		            				</span>
		            				<span class="green li-fee-pay" style="display:none;">
		            					0.01
		            				</span>
		            			</span>
		            		</li>
		            	
		            		<li class="text-28">
								<a class="li-youhui-name" cardId="559835600429" cardType="DISCOUNT" cardAmount="1">测试
								</a>		            			
		            			<span class="green">-￥
		            				<span class="green li-youhui">
		            					0.01
		            				</span>
		            				<span class="green li-fee-pay" style="display:none;">
		            					0.01
		            				</span>
		            			</span>
		            		</li>
		            	
		            		<li class="text-28">
								<a class="li-youhui-name" cardId="500958000429" cardType="DISCOUNT" cardAmount="1">测试
								</a>		            			
		            			<span class="green">-￥
		            				<span class="green li-youhui">
		            					0.01
		            				</span>
		            				<span class="green li-fee-pay" style="display:none;">
		            					0.01
		            				</span>
		            			</span>
		            		</li>
		            	
		            </ul>

                    <!-- 异步加载菊花 -->
                    <div class="loader j-loader dn">
                        <i class="icon"></i>
                    </div>
                    
		            <script type="text/javascript" src="/plugin/zepto/js/zepto.min.js?v=3.8.0-59cf5"></script>
		            <script type="text/javascript" src="/plugin/zepto/js/touch.js?v=3.8.0-59cf5"></script>
		            <script type="text/javascript" src="/js/mall/mall.js?v=3.8.0-59cf5"></script>
		            <script type="text/javascript" src="/plugin/zepto/js/zepto.alert.min.js?v=3.8.0-59cf5"></script>
		            <script type="text/javascript" src="/js/crypto.md5.js?v=3.8.0-59cf5"></script>
			        <script type="text/javascript">
			        	var hasYouHui = 'false';
			        	var useDiscount = 'true';
			        	var selectCardId='',selectCardType='',selectCardName='',selectCardNum=0;
			        	
			        	// 若优惠和抵现都无，这隐藏这个area
				    	var $areaDiscount = $('.area-discount');
			        	
			        	if (useDiscount ==  'false' && ('true' == 'false' || ('true' == 'true' && $('#bonusDiv').css('display') == 'none'))) {
			        		$areaDiscount.hide();
			        	}
			        	
			        	var bonusNum='',bonusPrice='';
			        	if(hasYouHui == 'false') {
			        		selectCardId='167020';
			        		selectCardType='MEMBER_CARD';
			        		selectCardName='会员折扣';
			        		selectCardNum = '0';
			        	}
				        window.onload=function(){
				        	$(".bg").css('height',$("#wrapper").height()+'px');
				        	$(".li-top-bottom").click(function(){
				        		if(hasYouHui == 'true') {
				        			return;
				        		}
				        		$(".bg,.detail").show('slow');
				        	});
				        	var balance = $(".ka-p span.check-img").parent().prev("span.member-num").text();

				        	// 使用优惠券浮层
				        	$(".detail li").click(function(){
				        		var obj = $(this);
				        		balance = $(".ka-p span.check-img").parent().prev("span.member-num").text();

				        		// 为true是，是返回按钮
				        		if(obj.hasClass('return-youhui')){
				        			$(".bg,.youhui").hide('slow');
				        		}else{
				        			var obj_val = obj.find('.li-youhui').html();
				        			var obj_name = obj.find(".li-youhui-name").html();
				        			var obj_fee_pay = obj.find(".li-fee-pay").html();  // 实际支付金额
				        			var obj_real_fee = $(".trade-fee").text();  // 原来的金额

				        			// 计算实收
				        			if(obj_val == ''){
				        				$(".youhui-price").html('0');
				        				$(".discount-fee").hide();
				        				$(".li-top-bottom .r-span").hide();
				        				$(".price").html('￥'+obj_real_fee);
                                        $('.paid-value').html('￥'+obj_real_fee);
				        				//$(".contain-p .pay-fee").html(obj_real_fee);
						        		selectCardName = '';
				        			}
				        			else {
				        				$(".discount-fee").show();
				        				$(".li-top-bottom .r-span").show();
				        				$(".youhui-price").html(obj_val);

				        				$(".discount-fee").html('￥'+obj_real_fee);  // 原来应付金额
				        				//$(".contain-p .pay-fee").html(obj_fee_pay); // 实付金额
				        				$(".price").html('￥'+obj_fee_pay);  // 实付金额
                                        $(".paid-value").html('￥'+obj_fee_pay);

					        			selectCardName = obj_name;
				        			}

				        			selectCardId = obj.find(".li-youhui-name").attr("cardId");
				        			selectCardType = obj.find(".li-youhui-name").attr("cardType");
				        			selectCardNum = obj.find(".li-youhui-name").attr("cardAmount");
				        			$(".youhui-name").html(obj_name)
				        			$(".bg,.youhui").hide('slow');

					                checkBalance(balance);
				                    changeBonus(true);
				                }
				        	});
				        	checkBalance(balance);
				        }
			        	function checkBalance(balance) {
	                		var price = $(".middle-header .price").text();
	                		price = price.split("￥")[1];
	                		if(parseFloat(balance) < parseFloat(price)) {
	                			$(".btn-a").prop("disabled", true).addClass("disable");
	                			$(".header .warning").css("display", "block").text("余额不足");
	                		} else {
	                			$(".btn-a").prop("disabled", false).removeClass('disable');
	                			$(".header .warning").css("display", "none").text("");
	                		}

	                		var obj = $(".bonus").find('span.bg-img');
		                    if(useDiscount == 'false' && obj.css('display') == 'none'){
		                		//隐藏横杠
		                		$('.area-discount').addClass('dn');
		                    }

	                		//循环所有会员账户和储值卡
	                		var temp = 0;
							$(".ka-p").each(function(index, node){

							    var value = parseFloat($(node).find('.member-num').text());

							    // 当该值小于balance的时候，添加no2
							    if (value < parseFloat($('.paid-value').text().replace(/(\s*)/g,'').replace(/￥/g, ''))) {
							    	$(node).addClass('no2')
							    }
							    else {
							    	// 存在可选的卡
							    	temp = 1;
							    	$(node).removeClass('no2')
							    }
							})

							if (temp === 0) {
								$(".btn-a").prop("disabled", true).addClass("disable");
							}
			        	}

			        	function changeBonus(flag){
			        		if(flag){
			        			var undiscountableAmount = (parseFloat("0")/100).toFixed(2);
			        			var price = parseFloat($(".price").text().substring(1)).toFixed(2); // 实付金额
			        			//加入不可优惠金额,计算优惠时先减去
			        			price = price - undiscountableAmount;

			        			var m_price = parseFloat(Math.round((parseFloat(price) * parseFloat("100")))/100).toFixed(2);//最大抵扣金额
			        			if (parseFloat(m_price) >= parseFloat(price) && undiscountableAmount <= 0) {
			        				//如果无不可优惠金额,那么可以抵扣到只剩一分钱
		                        	m_price = parseFloat((price*100 - 1)/100);
		    					}
			        			var max_bonus = 0;
		                        var max_price = 0;
		                        var bonusStand = "";
		                        if (parseInt("1") == 1) {
		                        	bonusStand = true;
		                        }
		                        if(bonusStand){
		                        	max_bonus = parseInt(parseFloat(m_price/parseFloat("0.01")).toFixed(2));
		                        	max_price = parseFloat(max_bonus * parseFloat("0.01")).toFixed(2);//最大抵扣金额
	                        	}else{
	                        		max_bonus = parseInt(m_price*100*parseFloat("1")); //抵扣最大金额所需积分
	                        		max_price = parseFloat(m_price).toFixed(2);//最大抵扣金额
	                        	}
		                        if(0 >= max_bonus || 0 >= parseInt("")){
		                        	$("#bonusDiv").hide();
		                        	bonusNum='';
		                        	bonusPrice='';
		                        	return;
		                        }else if(parseInt("") < max_bonus){//用户积分不足达到最大上限积分
		                        	if(""){
		                        		//var jishu = parseInt(parseInt("")/parseInt("1"));
		                        		var real_price = parseFloat(parseInt("") * parseFloat("0.01")).toFixed(2);//用户实际抵扣金额,单位：分
			                        	var real_bonus = parseInt(""); //用户实际抵扣所用积分
			                        	var end_price = parseFloat((parseFloat(price) - real_price)).toFixed(2);
			                        	var obj = $(".bonus").find('span.bg-img');
					                    if(obj.hasClass('check-img')){
			                        		$(".price").html('￥'+parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));  // 实付金额
                                            $(".paid-value").html('￥'+parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));
			                        		$(".pay-fee").html(end_price);
					                    }
			                        	$(".trueFee").html(real_price);
			                        	$(".trueBonus").html(real_bonus);
			                        	if(obj.hasClass('check-img')){
			                        		bonusPrice = real_price;
			                        		bonusNum = real_bonus;
			                        	}

		                        	}else{
 		                        		var jishu = parseInt(parseInt("")/parseInt("1"));
			                        	var real_price = parseFloat(jishu / 100).toFixed(2);//用户实际抵扣金额,单位：分
			                        	var real_bonus = jishu * parseInt("1"); //用户实际抵扣所用积分
			                        	var end_price = parseFloat(parseFloat(price) - real_price).toFixed(2);
			                        	var obj = $(".bonus").find('span.bg-img');
					                    if(obj.hasClass('check-img')){
			                        		$(".price").html('￥'+ parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));  // 实付金额
			                        		//$(".pay-fee").html(end_price);
                                            $('.paid-value').html('￥'+ parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));
					                    }
			                        	$(".trueFee").html(real_price);
			                        	$(".trueBonus").html(real_bonus);
			                        	if(obj.hasClass('check-img')){
			                        		bonusPrice = real_price;
			                        		bonusNum = real_bonus;
			                        	}
		                        	}
		                        	$("#bonusDiv").show();
		        				}else{
		        					var end_price = parseFloat(parseFloat(price) - max_price).toFixed(2);
		        					var obj = $(".bonus").find('span.bg-img');
				                    if(obj.hasClass('check-img')){
		                        		$(".price").html('￥'+parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));  // 实付金额
		                        		//$(".pay-fee").html(end_price);
                                        $('.paid-value').html('￥'+parseFloat(parseFloat(end_price) + parseFloat(undiscountableAmount)).toFixed(2));
				                    }
		                        	$(".trueFee").html(max_price);
		                        	$(".trueBonus").html(max_bonus);
		                        	if(obj.hasClass('check-img')){
		                        		bonusPrice = max_price;
		                        		bonusNum = max_bonus;
		                        	}
		                        	$("#bonusDiv").show();
		        				}
			        		}else{
			        			var bonusFee = $(".trueFee").html();
			        			var price = $(".price").text().substring(1);
			        			var end_price = parseFloat(parseFloat(price) + parseFloat(bonusFee)).toFixed(2);
	                        	$(".price").html('￥'+ parseFloat(end_price).toFixed(2));  // 实付金额
                                $('.paid-value').html('￥'+ parseFloat(end_price).toFixed(2));
	                        	//$(".pay-fee").html(end_price);
	                        	bonusNum='';
	                        	bonusPrice='';
	                        	$("#bonusDiv").show();
			        		}
			        	}
			        	
			        	function sign(obj) {
			        		var arr = [];
			        		for(var key in obj) {
			        			arr[arr.length] = key;
			        		}
			        	    arr.sort();
			        	    var str = "";
			        	    for(var i = 0; i < arr.length; i++) {
			        	    	var key = arr[i];
			        			var val = obj[arr[i]];
			        			if(typeof(val) == 'number') {
			        				val = val + "";
			        			}
			        			if(null == val || "" == val || undefined == val) {
			        				continue;
			        			}
			        			str += key + "=" + val + "&";
			        		}
			        	    if(str.length > 0) {
			        	    	str = str.substring(0, str.length - 1);
			        	    }
			        	    return CryptoJS.MD5(str) + "";
			        	}

			        	Zepto(function(){
			                $('.ka-p').click(function(){

                                // 该选择是否不可选
                                if ($(this).hasClass('no2')) {
                                    return false;
                                }

			                    var obj = $(this).find('span.bg-img');
			                    if(obj.hasClass('check-img')){
			                        obj.removeClass('check-img');
			                        obj.next().removeAttr('checked');
			                    } else {
			                        $(".ka-p span").removeClass('check-img');
			                        $(".ka-p input[name=ka]").removeAttr('checked');
			                        obj.addClass('check-img');
			                        obj.next().attr('checked','checked');

			                        var balance = $(this).find("span.member-num").text();
			                        checkBalance(balance);
			                    }
			                });
			                if("false"=="false"){
			                	$('.bonus').click(function(){
				                    var obj = $(this).find('span.bg-img');
				                    if(obj.hasClass('check-img')){
				                    	obj.removeClass('check-img');
				                    	obj.next()[0].checked = false;
				                        changeBonus(false);
				                    }else{
				                    	$(".bonus span").removeClass('check-img');
				                        obj.addClass('check-img');
				                        obj.next()[0].checked = true;
				                        changeBonus(true);
				                    }
				                    var balance = $(".ka-p span.check-img").parent().prev("span.member-num").text();
				                    checkBalance(balance);
				                });
			                }

			                $(".btn-a").click(function(event){

			                	var card = $(".check-img").parents(".ka-p").attr("id");

			                	if(typeof(card) == "undefined" || card == undefined){
			                		doAlert("no", '请选择储值卡', function(){
		        						return;
		        					}, 3000);
			                		return;
			                	}
			                	else if (card == '') {

			                		var temp = 1;
			                		$('.ka-p').each(function(node, index) {
			                			if (!$(this).hasClass('no2')) {
			                				temp = 0;
			                			}
			                		})

			                		if (temp === 1) {
				                		doAlert("no", '没有可选的储值卡', function(){
			        						return;
			        					}, 3000);
				                		return;
			                		}
			                	}

			                	var balance = $(".ka-p span.check-img").parent().prev("span.member-num").text();
				                checkBalance(balance);

			                	$(".btn-a").prop("disabled", true).addClass("disable");

			        			$('.j-loader').removeClass('dn');
			        			
			        			var params = {
		            				orderId : "30803924883842273280",
		            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
		            				productOrderId : "20803924869985816576",
		            				customerId : "167020",
		            				type : $(".ka-p span.check-img").parents(".ka-p").attr("type"),
		            				cardId : $(".check-img").parents(".ka-p").attr("id"),
		            				customerName : "fuyu",
		            				shopId : "42",
		            				yhCardId : selectCardId,
		            				yhCardType : selectCardType,
		            				yhCardNum : selectCardNum
		            			};
			        			var obj = $(".bonus").find('span.bg-img');
			                    if(obj.hasClass('check-img')){
			                    	params.discountNum = bonusNum;
			                    	params.discountPrice = parseFloat(bonusPrice).toFixed(2).toString();
			                    }
			                    params.token = sign(params);
			                    
			        			$.post("/pay/card/doconfirm", params, function(result){
			        				$('.j-loader').addClass('dn');

			        				if(!result.success && result.attach != null && result.attach == '700401'){
			        					doAlert("no", '当前所选卡券已无法使用，请重新选择', function(){
			        						window.location.reload();
			        					}, 3000);
			        					return;
			        				}

			        				$(".btn-a").prop("disabled", false).removeClass('disable');
			        				var resultLoc = "/pay/pay/result?ptype=5";
			        				resultLoc += "&serial=10549840601068216320";
			        				if("" != ""){
			        					resultLoc += "&shopBranchId=";
			        				}
			        				resultLoc += "&productOrderId=20803924869985816576"
			        				if (!result.success) {
			        					resultLoc += "&success=0";
			        				}else{
			        					resultLoc += "&success=1";
			        				}
			        				resultLoc += "&cardName=" + selectCardName;
			        				window.location.href = resultLoc;
			        	    	});
			        		});
			            });
			        </script>
		    	
		    
        </div>
    </body>
</html>
2016-11-30 19:33:31,770 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:33 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=D14E70E311B63B8AB8B8830AE62C38E0; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2016-11-30 19:33:31,770 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:31,770 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：确认支付
2016-11-30 19:33:31,771 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：储值卡
2016-11-30 19:33:31,771 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:31,771 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:31,771 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:20",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'orderId': '20803924869985816576'}, 'url': '/pay/5?'}", expected_results="{'检查': 'body', '条件': [{'模式': '确认支付', '消息': '提交储值卡支付订单-pay5重定向失败,没确认支付按钮'}, {'模式': '储值卡', '消息': '提交储值卡支付订单-pay5重定向失败,没打开页面'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 114 AND step_id = 117 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:31,774 testcase.py[line: 158] INFO: 测试用例[id=114, name=test-n-提交储值卡支付订单-pay5重定向]执行成功
2016-11-30 19:33:31,774 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:31,775 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:16" WHERE executed_history_id = 20161130193313 AND testcase_id = 114 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:31,896 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=114]的执行结果
2016-11-30 19:33:32,160 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 17:33:09', 'full_tc_external_id': 'wecharno-8', 'name': 'test-n-创建储值卡支付订单', 'updater_first_name': 'Testlink', 'testcase_id': '106', 'tc_external_id': '8', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-21 11:26:32', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '105', 'id': '107', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;创建储值卡支付订单失败，success不为True&quot;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;success&quot;: &quot;\\&quot;success\\&quot;:(.+?),&quot;,&quot;attach&quot;:&quot;attach\\&quot;:\\&quot;(.+?)\\&quot;&quot;}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;请求头&quot;：{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;charset&quot;:&quot;utf-8&quot;},<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:1,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '108', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:32,286 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:32,286 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 106, 'test-n-创建储值卡支付订单', '微商城-创建储值卡支付订单接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:32,287 testplan.py[line: 72] INFO: 开始执行测试用例[id=106，name=test-n-创建储值卡支付订单]
2016-11-30 19:33:32,288 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}
2016-11-30 19:33:32,288 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"success\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\"success\":(.+?),","attach":"attach\":\"(.+?)\""}}
2016-11-30 19:33:32,288 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:32,288 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 106, 'test-n-创建储值卡支付订单', 'plan1_of_wechatno', 'pj_wechatno', 108, 1, '', 'http', 'm.test.saofu.cn', 80, '{"请求头":{"Content-Type":"application/x-www-form-urlencoded","charset":"utf-8"},"方法":"post","url":"/cmorder/1/4","参数":{"serial":"[global_serial]","openId":"[global_openId]","fm":1,"mallGoodsId":"26838", "amount":1,"cartIds":"","fetchTime":"", "remark":""}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"success\\":true", "消息":"创建储值卡支付订单失败,success不为True"}],"输出":{"success": "\\"success\\":(.+?),","attach":"attach\\":\\"(.+?)\\""}}', 'Block', '', '')
2016-11-30 19:33:32,289 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:32,289 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:32,289 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:32,290 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:32,290 casestep.py[line: 102] INFO: 转换后的参数体为：{'fm': 1, 'amount': 1, 'remark': '', 'cartIds': '', 'serial': '10549840601068216320', 'mallGoodsId': '26838', 'fetchTime': '', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:32,290 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:32,290 casestep.py[line: 102] INFO: 转换后的参数体为：{'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}
2016-11-30 19:33:32,290 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:32,290 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/cmorder/1/4
2016-11-30 19:33:32,290 httpprotocol.py[line: 75] INFO: 参数为：b'fm=1&amount=1&remark=&cartIds=&serial=10549840601068216320&mallGoodsId=26838&fetchTime=&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2016-11-30 19:33:32,290 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY', 'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}
2016-11-30 19:33:36,300 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:36,301 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":"20803924934993334272"}
2016-11-30 19:33:36,301 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:38 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:36,302 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:36,302 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："success":true
2016-11-30 19:33:36,303 unittesttestcase.py[line: 278] INFO: 获取到的变量的值为：['true']
2016-11-30 19:33:36,303 unittesttestcase.py[line: 278] INFO: 获取到的变量的值为：['20803924934993334272']
2016-11-30 19:33:36,304 unittesttestcase.py[line: 290] INFO: 提取的输出结果(key-value对)为:[{'OperatorId': 1318}, {'Token': '79b87bf3-1b29-498c-9586-9856899e0409'}, {'success_1': 'true'}, {'attach_1': '20803924869985816576'}, {'attach_1': '20803924934993334272'}]
2016-11-30 19:33:36,305 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:36,305 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:32",step_action="{'方法': 'post', '请求头': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'utf-8'}, '参数': {'fm': 1, 'amount': 1, 'remark': '', 'cartIds': '', 'serial': '10549840601068216320', 'mallGoodsId': '26838', 'fetchTime': '', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cmorder/1/4'}", expected_results="{'检查': 'body', '输出': {'success': ''success':(.+?),', 'attach': 'attach':'(.+?)''}, '条件': [{'模式': ''success':true', '消息': '创建储值卡支付订单失败,success不为True'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 106 AND step_id = 108 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:36,318 testcase.py[line: 158] INFO: 测试用例[id=106, name=test-n-创建储值卡支付订单]执行成功
2016-11-30 19:33:36,319 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:36,319 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:32" WHERE executed_history_id = 20161130193313 AND testcase_id = 106 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:36,496 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=106]的执行结果
2016-11-30 19:33:36,824 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '2', 'status': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-07-29 17:13:06', 'full_tc_external_id': 'wecharno-9', 'name': 'test-n-储值卡支付-不使用优惠，会员账户支付', 'updater_first_name': 'Testlink', 'testcase_id': '110', 'tc_external_id': '9', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-22 14:48:17', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '109', 'id': '111', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;style&quot;:&quot;testcase&quot;,<br />\n\t<br />\n\t&quot;testcase_id&quot;:114,<br />\n\t<br />\n\t&quot;testcase_name&quot;:&quot;test-n-提交储值卡支付订单-pay5重定向&quot;<br />\n\t}</p>\n', 'id': '112', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_without_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:-1,&quot;yhCardType&quot;:-1}<br />\n\t}</p>\n', 'id': '119', 'active': '1', 'step_number': '3'}], 'active': '0'}]
2016-11-30 19:33:36,972 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:36,972 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 110, 'test-n-储值卡支付-不使用优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:36,974 testplan.py[line: 72] INFO: 开始执行测试用例[id=110，name=test-n-储值卡支付-不使用优惠，会员账户支付]
2016-11-30 19:33:36,974 testcase.py[line: 27] WARNING: 用例[name=test-n-储值卡支付-不使用优惠，会员账户支付]处于禁用状态[active=0]，不执行
2016-11-30 19:33:36,974 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:36,974 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2016-11-30 19:33:36" WHERE executed_history_id = 20161130193313 AND testcase_id = 110 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:37,108 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=110]的执行结果
2016-11-30 19:33:37,249 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 17:58:09', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'tc_external_id': '4', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:07:40', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '87', 'id': '89', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175', 'active': '1', 'step_number': '1'}, {'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90', 'active': '1', 'step_number': '3'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176', 'active': '1', 'step_number': '4'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177', 'active': '1', 'step_number': '5'}], 'active': '1'}]
2016-11-30 19:33:37,387 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:37,387 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', '微商城-把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:37,389 testplan.py[line: 72] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2016-11-30 19:33:37,389 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2016-11-30 19:33:37,389 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2016-11-30 19:33:37,389 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:37,390 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '')
2016-11-30 19:33:37,391 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:37,391 casestep.py[line: 127] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:37,391 casestep.py[line: 136] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2016-11-30 19:33:37,391 mydb.py[line: 84] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2016-11-30 19:33:37,394 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2016-11-30 19:33:37,394 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:37,394 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}]
2016-11-30 19:33:37,394 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:37,394 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:37",step_action="{'参数': ('ous64uFCCLMyXYDJ-MkNilyCI5CY',), '单条查询': 'SELECT id FROM customer WHERE channel_serial=%s', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:37,398 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2016-11-30 19:33:37,398 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:37,398 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:37,398 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '')
2016-11-30 19:33:37,400 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:37,400 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:33:37,400 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,)
2016-11-30 19:33:37,400 mydb.py[line: 70] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2016-11-30 19:33:38,143 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:38,144 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:37",step_action="{'更新': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '参数': (167020,), '步骤类型': '执行sql'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:38,157 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2016-11-30 19:33:38,158 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2016-11-30 19:33:38,158 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:38,158 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '')
2016-11-30 19:33:38,160 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:33:38,161 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:38,161 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:38,161 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:38,162 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'amount': 1, 'mallGoodsId': 26838, 'standardId': 'undefined', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:38,162 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:38,162 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:38,163 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2016-11-30 19:33:38,163 httpprotocol.py[line: 75] INFO: 参数为：b'serial=10549840601068216320&amount=1&mallGoodsId=26838&standardId=undefined&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2016-11-30 19:33:38,163 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:38,990 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:38,991 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":1}
2016-11-30 19:33:38,991 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:41 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:38,991 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:38,991 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2016-11-30 19:33:38,991 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：True
2016-11-30 19:33:38,991 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:38,992 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:38,992 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:38",step_action="{'方法': 'post', '参数': {'serial': '10549840601068216320', 'amount': 1, 'mallGoodsId': 26838, 'standardId': 'undefined', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/addtocart'}", expected_results="{'检查': 'body', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:38,995 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}
2016-11-30 19:33:38,995 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"strIds":1}}
2016-11-30 19:33:38,995 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:38,995 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 176, 4, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}', '{"检查":"body","输出":{"strIds":1}}', 'Block', '', '')
2016-11-30 19:33:38,997 testcase.py[line: 77] INFO: 开始执行步骤操作[第4步]
2016-11-30 19:33:38,997 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:33:38,997 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,1)
2016-11-30 19:33:38,997 mydb.py[line: 84] INFO: query：SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1  data：(167020, 1)
2016-11-30 19:33:39,000 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(18635,), flag:True
2016-11-30 19:33:39,001 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:39,001 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}, {'strIds': 18635}]
2016-11-30 19:33:39,001 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:39,001 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:38",step_action="{'参数': (167020, 1), '单条查询': 'SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'strIds': 1}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 176 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:39,004 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:33:39,004 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"amount\":1","消息":"购物车中商品总数错误"}, {"模式":"\"id\":26838","消息":"购物车中商品缺失"}]}
2016-11-30 19:33:39,004 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:39,005 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 177, 5, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"amount\\":1","消息":"购物车中商品总数错误"}, {"模式":"\\"id\\":26838","消息":"购物车中商品缺失"}]}', 'Block', '', '')
2016-11-30 19:33:39,006 testcase.py[line: 77] INFO: 开始执行步骤操作[第5步]
2016-11-30 19:33:39,006 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:39,006 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:39,006 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:39,006 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:39,006 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:39,007 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:39,007 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=10549840601068216320&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:39,007 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:39,062 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:39,062 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": [{"id":18635,"customer":null,"mallGoods":{"id":26838,"name":"接口-测试商品1","privateSerial":null,"price":1,"oriPrice":0,"description":"接口测试专用,烦请勿删,勿操作","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg,","shop":null,"shopId":null,"mallGoodsCate":null,"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},"mallGoodsStandard":null,"amount":1,"shop":null,"shopBranchId":null,"closed":null,"cateringType":null}]
2016-11-30 19:33:39,062 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:41 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:39,062 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:39,062 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："amount":1
2016-11-30 19:33:39,062 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："id":26838
2016-11-30 19:33:39,063 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:39,063 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:39,063 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:39",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cartlist?'}", expected_results="{'检查': 'body', '条件': [{'模式': ''amount':1', '消息': '购物车中商品总数错误'}, {'模式': ''id':26838', '消息': '购物车中商品缺失'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 177 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:39,066 testcase.py[line: 158] INFO: 测试用例[id=88, name=test-n-把商品加入购物车]执行成功
2016-11-30 19:33:39,067 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:39,067 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:37" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:39,186 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=88]的执行结果
2016-11-30 19:33:39,436 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1001', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:14:53', 'full_tc_external_id': 'wecharno-7', 'name': 'test-n-点击立即购买按钮', 'updater_first_name': 'Testlink', 'testcase_id': '102', 'tc_external_id': '7', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 16:48:26', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '79', 'id': '103', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;到店支付&quot;,&quot;消息&quot;:&quot;无法打开商品详情&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/mall/tobuy/1?&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:&quot;26838&quot;,&quot;amount&quot;:1,&quot;type&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '104', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:39,621 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:39,621 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 102, 'test-n-点击立即购买按钮', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:39,624 testplan.py[line: 72] INFO: 开始执行测试用例[id=102，name=test-n-点击立即购买按钮]
2016-11-30 19:33:39,624 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}
2016-11-30 19:33:39,625 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}
2016-11-30 19:33:39,625 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:39,625 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 102, 'test-n-点击立即购买按钮', 'plan1_of_wechatno', 'pj_wechatno', 104, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/mall/tobuy/1?","参数":{"mallGoodsId":"26838","amount":1,"type":1,"serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"到店支付","消息":"无法打开商品详情"}]}', 'Block', '', '')
2016-11-30 19:33:39,628 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:39,628 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:39,628 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:39,628 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'mallGoodsId': '26838', 'amount': 1, 'type': 1}
2016-11-30 19:33:39,629 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:39,629 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:39,629 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/mall/tobuy/1?serial=10549840601068216320&mallGoodsId=26838&amount=1&type=1
2016-11-30 19:33:39,629 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:40,267 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:40,267 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 
	 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=3.8.0-59cf5" />  
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta http-equiv="Expires" CONTENT="0">
<meta http-equiv="Cache-Control" CONTENT="no-cache">
<meta http-equiv="Pragma" CONTENT="no-cache">
<title>微商城</title>
<link rel="stylesheet" href="/css/mall/pure.css?v=3.8.0-59cf5">
<link rel="stylesheet" href="/css/mall/grids-core.css?v=3.8.0-59cf5">
<link rel="stylesheet" href="/css/mall/zepto.alert.css?v=3.8.0-59cf5">

<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.css?v=3.8.0-59cf5">
<link rel="stylesheet" href="/css/mall/mobiscroll.scroller.ios7.css?v=3.8.0-59cf5">
<link rel="stylesheet" href="/css/mall/mobiscroll.animation.css?v=3.8.0-59cf5">
</head>
<style type="text/css">
* {
	margin: 0;
	padding: 0;
}

html {
	color: #626262;
	overflow-y: auto;
	overflow-x: hidden;
}

body {
	margin-bottom: 20px;
	overflow-y: auto;
	overflow-x: hidden;
}

a {
	text-decoration: none;
}

ol,ul {
	list-style: outside none none;
}

.left {
	float: left;
}

.right {
	float: right;
}

.in-block {
	display: inline-block;
}

.orange {
	color: #c58d04;
}

.grey {
	color: #adadad;
}

.bg-color {
	background: #ececec;
}

#wrapper {
	width: 100%;
	margin: 0 auto;
}

.header {
	width: 100%;
}

.header ul {
	position:relative;
	overflow: hidden;
}

.header ul li {
	width: 50%;
	float: left;
	height: 2.8em;
	line-height: 2.8em;
	background: #fff;
	text-align: center;
	border-bottom:1px solid #f38b44;
	-moz-box-sizing:border-box; /* Firefox */
     -webkit-box-sizing:border-box; /* Safari */
     box-sizing:border-box;
}
.header ul .lines{
	position: absolute;
	width: 1%;
	height: 2.8em;
	line-height: 2.8em;
	border-right: 1px solid #FDE5D4;
	left: 49%;
	top: -1px;
 } 
.header ul li a {
	color: #8b898a;
}

.tab_content>div {
	height: auto;
	font-size: 0.8em;
	margin: 0.5em 0;
}

.empty-p {
	width: 80%;
	float: left;
	padding: 0.5em 0;
}

.has-p {
    width: 100%;
    margin: 0 auto;
    padding: 0 1em;
    height: auto;
    line-height: 2.5em;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -webkit-box-sizing: -webkit-border-box;
}
.has-p-one{
    background: url(/images/mall/contact.png) no-repeat left center;
    background-size: 12px 12px;
}
.has-p-two{
    background: url(/images/mall/take.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.has-p-three{
    background: url(/images/mall/time.png) no-repeat left 2px;
    background-size: 12px 12px;
}
.input-right{
    position: relative;
}
.input-right-img{
    width: 1em;
    position: absolute;
    right: 0.6em;
    top: 0.3em;
}
#scheduledTime{
    width:11em;
    height: 2em;
    border:1px solid #a0a0a0;
    border-radius:4px;
    color:#a0a0a0;
    text-indent:.5em
}
.hiddens-p{
    text-overflow:ellipsis; 
    overflow:hidden; 
    white-space:nowrap;  
}

.right-dashed {
	border-left: 1px solid #eee;
	margin-top: 1em;
	padding-bottom:1em;
}

#edit {
	padding: 1em 0 1em 2em;
    width: 10px;
}

.header ul li.active{
    border-bottom: 4px solid #f38b44;
}
.header ul li.active a{
    color: #f38b44!important;
}
.buy_title{
	background:#f3f3f3;
	padding:0.3em 1em;
	margin: 0;
}
.content {
	width: 100%;
	background: #fff;
	overflow: hidden;	
	padding-bottom:8%;
}

.selectList {
	border-bottom: 1px solid #efefef;
	margin: 0 auto;
	overflow: hidden;
	padding: 0.5em 1em;
	font-size: 0.8em;
	clear:both;
}

.selectList img {
    display: inline-block;
    float: left;
    width: 25%;
    border-radius: 4px;
    -webkit-border-radius: 4px;
}

.button {
	display:block;	
	width: 99%;	
	height: 3em;
	color: #fff;
	border: none;
	border-radius: 4px;
	margin:0 auto 0.5em auto;
}

.addbtn {
	background: #33CC66;
}

.btn-wrap-5 {
	padding: 0 1em;
}
.buybtn {
	width: 100%;
	background: #f68d3c;
}

.footer {
	width: 100%;
	background: #fff;
	color: #b6b6b6;
	overflow: hidden;
	text-align: left;
	margin-bottom: 1em;
}

.all-end-button {
	width: 90%;
	margin: 1em auto 0.5em;
}

.all-end-button p:first-child {
	text-align: left;
}

.error-page{
	background: #ddd;
    padding-bottom: 2em;
}
.error-page img{
    margin:0 auto;
	padding-top: 2em;
}
.error-page p{
    text-align:center;
    color:#000;
    width:80%;
    margin:1em auto 2em;
}
#deliverFee{
	text-align:left;
	font-size:0.8em;
	color:#acb0af;
}
.order-div{
    margin-left: 26.8%;            
    position: relative;
}
.order-div>p:last-child{
    width: 100%;
    margin: 0;
    position: absolute;
    bottom: 0;
    left: 0;
}
.m-t-n{
    margin-top: 0;
}
.m-t-n>span{
    display: inline-block;
}
.m-t-n>span:first-child{
    width: 70%;
}
.m-t-n>span:last-child{
    width: 30%;
}
.mtn-span{
    float: right;
}
.t-r-span{
	text-align:right;
}
.ccc{
    color: #ccc;
}
.peisong{
    text-align: right;
    margin-bottom: 0;
    padding-right: 1em;
    padding-top: 0.4em;
}
.peisong-detail{
    color:#000;
}
.peisong-detail input{
    border: none;
}
.peisong-detail div>p{
    padding-left: 1.8em;
    padding-top: 0.8em;
    padding-bottom: 0.8em;
    margin: 0;
    clear:both;
}

.weipay{            
    background: url(/images/weixin2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}        
.peisong-detail div>p.pay{
    background: url(/images/money2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.cardpay{
    background: url(/images/cardpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}
.peisong-detail div>p.mdpay{
    background: url(/images/mdpay2.png) no-repeat left center;
    background-size:1.6em 1.4em; 
}

.peisong-detail div[class^="btn-wrap-"] {
	border-bottom: 1px solid #dadada;
	padding: 0 1em;
	height: 3em;
	position: relative;
}

.weipay,.pay,.mdpay,.cardpay{
    position: relative;
}
 .weipay>img,.mdpay>img,.pay>img,.cardpay>img,.zhifu input{
    width: 1.2em;
    height: 1.2em;
    position: absolute;
    right: 0;
    top: 50%;
    transform:translateY(-50%);
}

.pure-img-check {
	background: url(/images/weixuan2.png) no-repeat left center;
    background-size:1.2em 1.2em; 
    float: right;
    height: 1.2em;
    width: 1.2em;
}

.zhifu input{
    display: none;
}
#deliverFeeDiv, #FetchDiv {
	border-bottom: 1px solid #efefef;
    padding: 0.5em 1em;
}
#deliverFeeDiv p, #FetchDiv p{
	text-align:right;
}

#remark {
	padding: 0.5em 1em;
	height: 4em;
	font-size: 1.0em;
}
</style>
<body>
	<div id="wrapper">
		
			
			
			
				
					
					
						
						
						
						
						
					
					
				
				
			
			<div class="header">
				
					<ul class="tab">
						<li class='active' data='#deliverFeeDiv'><a href="#tab1">快递发货</a></li>						
						<li class=''><a href="#tab2">到店自提</a></li>
						<span class="lines"></span>
					</ul>
				
			</div>
			<p class="buy_title"></p>
			
			<div class="tab_container">
				<div id="tab1" class="tab_content pure-g" style="">
					<div class="pure-u-24-24">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">17817738178<span>(17817738178)</span></span>
								</div>
								<div class="has-p">
									<span>配送地址：</span>
									<span class="pure-u-3-5">天津市县宁河县详细</span>
									<span style="float:right;">
										
											
											
											<a href="/toaddr/1?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
												<img src="/images/enter.png?v=3.8.0-59cf5" class="pure-img" id="edit">
											</a>
											
										
									</span>
                                </div>
							
							
						
					</div>
				</div>
				<div id="tab2" class="tab_content pure-g" style="display:none">
					<div class="pure-u-24-24">
						
							
								<div class="has-p">
									<span>联系方式：</span>
									<span class="pure-u-3-5">452<span>(17817738178)</span></span>
								</div>
                                <div class="has-p">
                                	<span>门&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;店：</span>
                                	<span class="pure-u-3-5">
                                		广东省深圳市福田区
	                                	
	                                		Biu
	                                	
                                	</span>
									<span style="float:right;">
										
											
											
											<a href="/toaddr/2?serial=10549840601068216320&fm=1&mallGoodsId=26838&amount=1&amounts=&cartIds=">
												<img src="/images/enter.png?v=3.8.0-59cf5" class="pure-img" id="edit">
											</a>
											
										
									</span>
                                </div>
                               	<div class="has-p">
                               		<span>到店时间：</span>
                               		<span class="input-right">
                               			<input type="text" id="scheduledTime" name="scheduledTime" class="text" placeholder="请选择"/><img src="/images/mall/input-right.png?v=3.8.0-59cf5" class="input-right-img">
                               		</span>
                               	</div>
							
							
						
					</div>
				</div>
			</div>
			<p class="buy_title"></p>
			
			<div class="content">
				
					
						
							<div class="selectList">
								<img src="http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg"> 
								
									
									
										<div class="order-div">
											<p class="m-t-n"><span>接口-测试商品1</span><span class="mtn-span t-r-span">￥0.01</span></p>
											<p><span class="ccc mtn-span">X1</span></p>
                                        </div>	
									
								
							</div>
						
					
					
					
				
				<div id="deliverFeeDiv">
					 
						
						
							<p id="deliverFee">含运费：￥0.01</p>
							<p class="orange">合计：￥0.02</p>
						
					 
				</div>
				<div id="FetchDiv" style="display: none;">
					<p class="orange">合计：￥0.01</p>
				</div>
				<div id="remark">
					<span class="beizhu" style="float:left">备注：</span>
                   	<span class="beizhulan">
                   		<textarea rows="3" placeholder="可于此处给卖家留言备注" style="border:0;width: 85%;"></textarea>
                   	</span>
				</div>
			</div>
			<p class="buy_title"></p>
			<div class="footer">
				<div class="peisong-detail zhifu">
                	
                        <div class="btn-wrap-1">
                         	<p class="weipay">微信支付<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="1"/>
                         	</p>
                        </div>
                    
                  	
                  	
                        <div class="btn-wrap-2" style="">
                         	<p class="pay">货到付款<span class="pure-img-check"></span>
                             	<input type="radio" name="zhifu" value="3"/>
                         	</p>
                        </div>
                   	
		
                    
                        <div class="btn-wrap-3" style="display:none">
                        	<p class="mdpay">到店支付<span class="pure-img-check"></span>
                        		<input type="radio" name="zhifu" value="2"/>
                        	</p>
                        </div>
                   	
                   	
                   	
                        <div class="btn-wrap-4">
                       		<p class="cardpay">储值卡支付<span class="pure-img-check"></span>
                       			<input type="radio" name="zhifu" value="4"/>
                       		</p>
                        </div>
                   	
                </div>
			</div>
			<div class="btn-wrap-5">
				<input type="button" class="button buybtn submit" value="确认提交" />
			</div>
			
		
	</div>
	<script type="text/javascript" src="/js/zepto.min.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/touch.js?v=3.8.0-59cf5"></script>
    
	<script type="text/javascript" src="/js/mall/zepto.alert.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/mall/mall.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.zepto.js?v=3.8.0-59cf5" ></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.core.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.scroller.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.datetime.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript" src="/js/mall/mobiscroll.i18n.zh.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript">
		$(function() {
			$("input[name='zhifu']:checked").prev('.pure-img').attr('src','/images/check.png');
			var tab = parseInt("1");
			/* if(tab == 1){
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else if (tab == 0){
			    $("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} else if(parseInt("1") != 0){
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			} */
			
			if ("true" == "true" && 1 == 1) {
				$("#deliverFeeDiv").show();
				$("#FetchDiv").hide();
			} else {
				$("#deliverFeeDiv").hide();
				$("#FetchDiv").show();
			}
			
			// 控制显示图片比例
			var img_left_heights = $(".selectList img").width()*(0.75);
			$(".selectList img,.order-div").css('height',img_left_heights);
			
			// 取货日期
			var now = new Date();
            $('#scheduledTime').mobiscroll().datetime({
                minDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()+1),
                maxDate: new Date(now.getFullYear(), now.getMonth()+3, now.getDate()),
                stepMinute: 30,
                dateOrder :"yymmdd",
                dateFormat:"yy-mm-dd",
                timeWheels:"HHii",
                timeFormat:"HH:ii",
                //invalid: [{ start: '00:00', end: '08:00' },{ start: '22:00', end: '23:59' }],
                theme: 'ios7',
                lang: 'zh',
                display: 'bottom',
                mode: 'mixed'
            });
            $('#scheduledTime').click(function(){
                $('#scheduledTime').mobiscroll('show'); 
                return false;
            });
            
			$("ul li").click(function() {
				$("ul li").removeClass("active");
				$(this).addClass("active");
				if($(this).attr("data")=="#deliverFeeDiv"){
					$("#deliverFeeDiv").show();
					$("#FetchDiv").hide();
				}else{
					$("#deliverFeeDiv").hide();
					$("#FetchDiv").show();
				}
				$(".tab_content").hide();
				var href = $(this).find("a").attr("href");
				$(href).show();
				
				if(href.endWith("tab1")) {
					$(".btn-wrap-2").show();
					$(".btn-wrap-3").hide();
				} else if(href.endWith("tab2")) {
					$(".btn-wrap-2").hide();
					$(".btn-wrap-3").show();
				}
				//清空已选择的支付方式
				$("input[name='zhifu']").prop("checked", false);
				$(".zhifu .pure-img-check").css('background-image','url(/images/weixuan2.png)');
				return false;
			});
			//商户设置的满额包邮价
			/* var noDeliverFee = toPrice(parseFloat("")/100);
			var totalFee = parseFloat("0.01");
			if(totalFee > noDeliverFee){
				$("#deliverFeeDiv .orange").text("合计：￥"+ totalFee);
				$("#deliverFee").text("含运费：￥0.00");
			} */
			$('.zhifu>div').click(function(){
	            $("input[name=zhifu]").prop("checked", false);
	            $(".pure-img-check").css('backgroundImage','url(/images/weixuan2.png)');
	            var img_obj = $(this).find('.pure-img-check');
	            var backgroundImage = img_obj.css('background-image');
	            var input_obj = $(this).find('input');
	            if(backgroundImage.indexOf("weixuan2.png") > 0){
	                img_obj.css('background-image','url(/images/check.png)');
	                input_obj.prop("checked", "checked");
	            }else{
	                img_obj.css('background-image','url(/images/weixuan2.png)');
	                input_obj.prop("checked", false);
	            }
	        });
		});
		
		function validateRemark(){
			if($('.beizhulan textarea').val() != "" && $('.beizhulan textarea').val() != undefined){
				if($('.beizhulan textarea').val().length>30){
					$.dialog({
                        widths : '80%',
                        content : '您输入的备注过长，请不要超过30个字',
                        title : 'no',
                        fullok : function() {
                            return true;
                        },                       
                        lock : true
                    });	
					return false;
				}
				return true;
			}
			return true;
		}
		
		$(".submit").click(function(event){
			var payType = $("input[name='zhifu']:checked").val();
			if(null == payType || "" == payType || typeof(payType) == "undefined") {
       		 $.dialog({
                    widths : '80%',
                    content : '请选择支付方式',
                    title : 'no',
                    fullok : function() {
                        return true;
                    },                       
                    lock : true
                });
       			return;
       		}
			$.dialog({
                content : "确认提交订单？",
                title : "no",
                okText: '取消',
                cancelText : '确定', 
                ok : function() {
                	$(".ft-right").removeAttr("disabled");
                	return;
                },
                cancel : function() {                        	
               		
               		if(payType == 1){
               			if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				doAlert("no", "无效物流方式");
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4b18c274";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/1", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						doAlert("no", result.message);
            						return;
            					}
            					
            					var strParams = "id=" + result.attach;
            	    			strParams += "&serial=10549840601068216320";
            	    			if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
            	        	});
            			}
               		}
               		
    				if(payType == 2){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4b18c274";
    					if(shopBranch == "") {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑取货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					var _fetchTime = $("#scheduledTime").val();
    					if(null == _fetchTime || "" == _fetchTime) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请选择取货时间',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						
    						var _remark = $(".beizhulan").find("textarea").val();
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							fetchTime : _fetchTime,
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/2/2", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								doAlert("no", result.message);
    								return;
    							}
    							window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 3){
    					if($(this).prop("disabled") == true)
    		        		return false;
    					
    					if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
    						$.dialog({
        	                    widths : '80%',
        	                    content : '请编辑收货地址',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
    						return;
    					}
    					
    					
    					if(validateRemark()){
    						var dialog = $.dialog({
    			                content:'订单提交中',
    			                backgrounds :'#000',
    			                opacitys :'0.7',
    			                widths:'50%',
    			                paddings:'0',
    			                warppadding:'2em 0',
    			                foottop:'0',
    			                lock : true
    			            });
    						var _remark = encodeURI($(".beizhulan").find("textarea").val());
    						var params = {
    							serial : "10549840601068216320",
    							openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
    							fm : "1",
    							mallGoodsId : "26838",
    							amount : "1",
    							cartIds : "",
    							remark : _remark
    						};
    						if(parseInt("1") == 1 && parseInt("1") == 2){
    							var standardId = "";
    							if(standardId != null && standardId != undefined){
    								params.standardId = standardId;
    							}
    						}
    						$.post("/cmorder/1/3", params, function(result){
    							dialog.close();
    							if (!result.success) {
    								doAlert("no", result.message);
    								return;
    							}
    							window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
    			        	});
    					}
    				}
    				
    				if(payType == 4){
    					if($(this).prop("disabled") == true)
                    		return false;
            			
            			var type = 0;
            			$(".tab_content").each(function(){
            				if($(this).css("display") != "none") {
            					var attrId = $(this).attr("id");
            					if(attrId == "tab1") {
            						type = 1;//快递取货
            					} else if(attrId == "tab2") {
            						type = 2;//门店自提
            					}
            				}
            			});
            			if(type <= 0) {
            				$.dialog({
        	                    widths : '80%',
        	                    content : '无效物流方式',
        	                    title : 'no',
        	                    fullok : function() {
        	                        return true;
        	                    },                       
        	                    lock : true
        	                });
            				return;
            			}
            			if(type == 1) {
            				if($("#tab1 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑收货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			var _fetchTime = "";
            			if(type == 2) {
            				if($("#tab2 .pure-u-24-24 .empty-p").length > 0) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				_fetchTime = $("#scheduledTime").val();
            				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请选择取货时间',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4b18c274";
            				if(shopBranch == "") {
            					$.dialog({
            	                    widths : '80%',
            	                    content : '请编辑取货地址',
            	                    title : 'no',
            	                    fullok : function() {
            	                        return true;
            	                    },                       
            	                    lock : true
            	                });
            					return;
            				}
            			}
            			
            			var _remark = encodeURI($(".beizhulan").find("textarea").val());
            			var params = {
            				serial : "10549840601068216320",
            				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
            				fm : "1",
            				mallGoodsId : "26838",
            				amount : "1",
            				cartIds : "",
            				fetchTime : _fetchTime,
            				remark : _remark
            			};
            			if(parseInt("1") == 1 && parseInt("1") == 2){
            				var standardId = "";
            				if(standardId != null && standardId != undefined){
            					params.standardId = standardId;
            				}
            			}
            			
            			if(validateRemark()){
            				var dialog = $.dialog({
            	                content:'订单提交中',
            	                backgrounds :'#000',
            	                opacitys :'0.7',
            	                widths:'50%',
            	                paddings:'0',
            	                warppadding:'2em 0',
            	                foottop:'0',
            	                lock : true
            	            });
            				$.post("/cmorder/" + type+ "/4", params, function(result){
            					dialog.close();
            					
            					if (!result.success) {
            						doAlert("no", result.message);
            						return;
            					}
            					
            					var strParams = "?orderId=" + result.attach;
            					if(type == 2){
            						strParams += "&shopBranchId="+"1485916459";
            					}
            					strParams += "&serial=10549840601068216320";
                				window.location.href = "/pay/5"+strParams;
            	        	});
            			}
            			
    				}
    				
                },
                lock : true
            });
		});
		
		//微信支付
		/* $(".payUseWX").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			var type = 0;
			$(".tab_content").each(function(){
				if($(this).css("display") != "none") {
					var attrId = $(this).attr("id");
					if(attrId == "tab1") {
						type = 1;//快递取货
					} else if(attrId == "tab2") {
						type = 2;//门店自提
					}
				}
			});
			if(type <= 0) {
				doAlert("no", "无效物流方式");
				return;
			}
			if(type == 1) {
				if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑收货地址");
					return;
				}
			}
			var _fetchTime = "";
			if(type == 2) {
				if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
					doAlert("no", "请编辑取货地址");
					return;
				}
				_fetchTime = $("#scheduledTime").val();
				if(null == _fetchTime || "" == _fetchTime || typeof(_fetchTime) == undefined) {
					doAlert("no", "请选择取货时间");
					return;
				}
				var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4b18c274";
				if(shopBranch == "") {
					doAlert("no", "请编辑取货地址");
					return;
				}
			}
			
			var _remark = encodeURI($(".beizhulan").find("textarea").val());
			var params = {
				serial : "10549840601068216320",
				openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
				fm : "1",
				mallGoodsId : "26838",
				amount : "1",
				cartIds : "",
				fetchTime : _fetchTime,
				remark : _remark
			};
			if(parseInt("1") == 1 && parseInt("1") == 2){
				var standardId = "";
				if(standardId != null && standardId != undefined){
					params.standardId = standardId;
				}
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				$.post("/cmorder/" + type+ "/1", params, function(result){
					dialog.close();
					
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					
					var strParams = "id=" + result.attach;
	    			strParams += "&serial=10549840601068216320";
	    			window.location.href = "/pay/1?showwxpaytitle=1&" + strParams;
	        	});
			}
		}); */
		//货到付款
		/* $(".payAfrecv").click(function(event) {
			if($(this).prop("disabled") == true)
        		return false;
			
			if($("#tab1 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑收货地址");
				return;
			}
			
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				var _remark = encodeURI($(".beizhulan").find("textarea").val());
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/1/3", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/3?serial=10549840601068216320&ptype=" + 1;
	        	});
			}
		}); */
		//到店支付
		// $(".payInshop").click(function(event) {
			/* if($(this).prop("disabled") == true)
        		return false;
			
			var shopBranch = "yunnex.saofu.shop.entity.ShopBranch@4b18c274";
			if(shopBranch == "") {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			if($("#tab2 .pure-u-4-5 .empty-p").length > 0) {
				doAlert("no", "请编辑取货地址");
				return;
			}
			
			var _fetchTime = $("#scheduledTime").val();
			if(null == _fetchTime || "" == _fetchTime) {
				doAlert("no", "请选择取货时间");
				return;
			}
			
			if(validateRemark()){
				var dialog = $.dialog({
	                content:'订单提交中',
	                backgrounds :'#000',
	                opacitys :'0.7',
	                widths:'50%',
	                paddings:'0',
	                warppadding:'2em 0',
	                foottop:'0',
	                lock : true
	            });
				
				var _remark = $(".beizhulan").find("textarea").val();
				var params = {
					serial : "10549840601068216320",
					openId : "ous64uFCCLMyXYDJ-MkNilyCI5CY",
					fm : "1",
					mallGoodsId : "26838",
					amount : "1",
					cartIds : "",
					fetchTime : _fetchTime,
					remark : _remark
				};
				if(parseInt("1") == 1 && parseInt("1") == 2){
					var standardId = "";
					if(standardId != null && standardId != undefined){
						params.standardId = standardId;
					}
				}
				$.post("/cmorder/2/2", params, function(result){
					dialog.close();
					if (!result.success) {
						doAlert("no", result.message);
						return;
					}
					window.location.href = "/mall/success/2?serial=10549840601068216320&ptype=" + 1;
	        	});
			} */
		// });
	</script>
</body>
</html>
<!--加入判断用户是否关注公众号功能 add by lipengfei at 2015-11-9  -->
  	
	<script type="text/javascript" src="/js/bind/banner.js?v=3.8.0-59cf5"></script>
	<script type="text/javascript">
		$(function() {
			//var SHOP_SERIAL = getCookie("SHOP_SERIAL");
			var SHOP_SERIAL = "10549840601068216320";
			if(null != SHOP_SERIAL && SHOP_SERIAL != ""){
				$.ajax({
					url : '/saofu_mobile/checkUserBindStatus',
					data : {
						"serial" : SHOP_SERIAL
					},
					type : 'post',
					cache : false,
					dataType : 'json',
					success : function(data) {
						if (data != null) {
							var guildFocusStr = data.guildFocusStr;
							if(guildFocusStr != null && guildFocusStr == "1"){
								var hasBindedShop = data.hasBindedShop;
								if(hasBindedShop == "0"){
									var qrName = data.QRPublicName;
									var qrUrl = data.QRCodeURL;
									if(qrName != "" && qrUrl != ""){
										var params = qrName+"**"+qrUrl;
										followModule(params);
									}
								}
							}
						} 
					},
					error : function() {
					}
				});
			}
		});
				
	</script>

2016-11-30 19:33:40,270 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:42 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=7EC4EFB2E86DD9594E3F985B4CBEAD2B; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2016-11-30 19:33:40,270 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:40,270 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：到店支付
2016-11-30 19:33:40,271 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:40,271 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:40,271 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:39",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'mallGoodsId': '26838', 'amount': 1, 'type': 1}, 'url': '/mall/tobuy/1?'}", expected_results="{'检查': 'body', '条件': [{'模式': '到店支付', '消息': '无法打开商品详情'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 102 AND step_id = 104 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:40,274 testcase.py[line: 158] INFO: 测试用例[id=102, name=test-n-点击立即购买按钮]执行成功
2016-11-30 19:33:40,274 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:40,274 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:39" WHERE executed_history_id = 20161130193313 AND testcase_id = 102 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:40,387 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=102]的执行结果
2016-11-30 19:33:40,784 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:13:45', 'full_tc_external_id': 'wecharno-6', 'name': 'test-n-查看购物车商品列表', 'updater_first_name': 'Testlink', 'testcase_id': '98', 'tc_external_id': '6', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 15:50:42', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '97', 'id': '99', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;code&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;200&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '101', 'active': '1', 'step_number': '2'}], 'active': '1'}]
2016-11-30 19:33:41,001 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:41,001 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 98, 'test-n-查看购物车商品列表', '微商城-查看购物车商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:41,003 testplan.py[line: 72] INFO: 开始执行测试用例[id=98，name=test-n-查看购物车商品列表]
2016-11-30 19:33:41,003 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:33:41,003 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}
2016-11-30 19:33:41,003 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:41,003 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 98, 'test-n-查看购物车商品列表', 'plan1_of_wechatno', 'pj_wechatno', 101, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"code","匹配规则":"包含字符串","条件":[{"模式":"200","消息":"把商品移出购物车中失败"}]}', 'Block', '', '')
2016-11-30 19:33:41,006 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:41,006 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:41,006 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:41,007 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:41,007 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:41,007 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:41,007 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:41,007 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=10549840601068216320&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:41,007 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:41,425 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:41,426 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": [{"id":18635,"customer":null,"mallGoods":{"id":26838,"name":"接口-测试商品1","privateSerial":null,"price":1,"oriPrice":0,"description":"接口测试专用,烦请勿删,勿操作","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg,","shop":null,"shopId":null,"mallGoodsCate":null,"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},"mallGoodsStandard":null,"amount":1,"shop":null,"shopBranchId":null,"closed":null,"cateringType":null}]
2016-11-30 19:33:41,426 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:43 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:41,426 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:41,426 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：200
2016-11-30 19:33:41,426 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:41,427 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:41,427 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:41",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cartlist?'}", expected_results="{'检查': 'code', '条件': [{'模式': '200', '消息': '把商品移出购物车中失败'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 98 AND step_id = 101 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:41,430 testcase.py[line: 158] INFO: 测试用例[id=98, name=test-n-查看购物车商品列表]执行成功
2016-11-30 19:33:41,431 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:41,431 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:41" WHERE executed_history_id = 20161130193313 AND testcase_id = 98 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:41,574 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=98]的执行结果
2016-11-30 19:33:41,873 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '<p>\n\t1、运行时，ulr中的40758966216286146560取自base_info.serial字段</p>\n<p>\n\t&nbsp;</p>\n<p>\n\t&nbsp;</p>\n', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 19:43:22', 'full_tc_external_id': 'wecharno-12', 'name': 'test-n-免费领取优惠券', 'updater_first_name': 'Testlink', 'testcase_id': '126', 'tc_external_id': '12', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-26 15:06:38', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '125', 'id': '127', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行SQl&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE base_info SET sku_quantity = 1000&nbsp; WHERE serial = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;40758966216286146560\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '181', 'active': '1', 'step_number': '1'}, {'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;</p>\n<pre style="background-color:#ffffff;color:#000000;font-family:\'宋体\';font-size:12pt;">\n<span style="color:#008080;font-weight:bold;">UPDATE base_info SET listing = 1  WHERE serial = %s</span>&quot;,\n</pre>\n<p>\n\t&quot;参数&quot;:&quot;(40758966216286146560,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '180', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;检查&quot;：&ldquo;body&rdquo;,</p>\n<p>\n\t&quot;匹配规则&quot;：&ldquo;包含字符串&rdquo;,</p>\n<p>\n\t&ldquo;条件&rdquo;：[{&quot;模式&quot;：&ldquo;success\\&quot;:true&quot;,&quot;消息&quot;：&ldquo;<span style="color:#008080;font-weight:bold;">success不为ture,领取卡券失败</span>&rdquo;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;urL&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;参数&quot;:&quot;&quot;<br />\n\t}</p>\n', 'id': '128', 'active': '1', 'step_number': '3'}], 'active': '1'}]
2016-11-30 19:33:41,993 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:41,993 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 126, 'test-n-免费领取优惠券', '卡券中心-免费领取卡券接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:41,995 testplan.py[line: 72] INFO: 开始执行测试用例[id=126，name=test-n-免费领取优惠券]
2016-11-30 19:33:41,995 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行SQl","更新":"UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s","参数":"(\"40758966216286146560\",)"}
2016-11-30 19:33:41,995 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:41,996 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:41,996 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:41,996 mydb.py[line: 70] INFO: query：UPDATE base_info SET sku_quantity = 1000  WHERE serial = 40758966216286146560
2016-11-30 19:33:42,700 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:42,701 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:41",step_action="{'更新': 'UPDATE base_info SET sku_quantity = 1000  WHERE serial = %s', '参数': ('40758966216286146560',), '步骤类型': '执行SQl'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 126 AND step_id = 181 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:42,704 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}
2016-11-30 19:33:42,704 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:42,704 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:42,704 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 180, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE base_info SET listing = 1  WHERE serial = %s","参数":"(40758966216286146560,)"}', '', 'Block', '', '')
2016-11-30 19:33:42,706 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:42,706 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:42,707 mydb.py[line: 70] INFO: query：UPDATE base_info SET listing = 1  WHERE serial = 40758966216286146560
2016-11-30 19:33:42,712 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:42,712 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:42",step_action="{'更新': 'UPDATE base_info SET listing = 1  WHERE serial = %s', '参数': (40758966216286146560,), '步骤类型': '执行sql'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 126 AND step_id = 180 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:42,716 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}
2016-11-30 19:33:42,716 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true","消息":"success不为ture,领取卡券失败"}]}
2016-11-30 19:33:42,716 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:42,716 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 126, 'test-n-免费领取优惠券', 'plan1_of_wechatno', 'pj_wechatno', 128, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/kq/getincoupon/40758966216286146560/[global_openId]","参数":""}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true","消息":"success不为ture,领取卡券失败"}]}', 'Block', '', '')
2016-11-30 19:33:42,717 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:33:42,718 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:42,718 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:42,718 casestep.py[line: 127] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:42,718 casestep.py[line: 136] INFO: 转换后的参数体为：/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:42,718 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:42,718 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:42,718 httpprotocol.py[line: 75] INFO: 参数为：b''
2016-11-30 19:33:42,718 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:44,321 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:44,322 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"code":"4001","reason":null,"result":null,"getByWeixin":false,"cardCode":"101809100420","couponWeiXinCustomerId":135683,"jsapi":null,"couponWeixinCustomers":null,"weixinVersion":null,"cardPreprintLogId":null,"jssdk":null,"cwc":{"id":135683,"cw":{"id":1421,"shop":{"id":42,"serial":"10549840601068216320","parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":"深圳云移","logoUrl":"upload/image/2016/10/26/1de0a376-5315-4191-b577-c459edbb1ee1.jpg","printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"cardId":null,"cardType":"cash","baseInfo":{"id":2001,"frontImageUrl":"http://res.yunnex.com/saofu/coupon/11.png","appid":null,"codeType":2,"title":"接口-代金券","subTitle":"","color":"509fc9","notice":"接口自动化测试专用，烦请勿动","servicePhone":"07556644511","description":"接口自动化测试专用，烦请勿动，勿修改，勿下架","useLimit":1,"getLimit":null,"dateInfoType":1,"dateInfoBeginTimestamp":1469721600000,"dateInfoEndTimestamp":1517328000000,"dateInfoBeginTimestampStr":null,"dateInfoEndTimestampStr":null,"dateInfoFixedTerm":null,"fixedBeginTerm":null,"skuQuantity":1000,"getInType":3,"serial":"40758966216286146560","cardType":1,"listing":1,"canShare":false,"fitAll":true,"coverShow":null,"shopId":42,"checkPass":null,"modifyTime":null,"cardId":null,"couponId":null,"price":null,"allowedScope":"ONLINE","detailImgUrl":"upload/file/2016/09/14/ed0d5ffa-fd1b-46b8-8b9e-236cd9732eda.jpeg","detailTxt":"文字描述","backGroundPicUrl":null,"timeLimitList":[],"cardCouponCardType":null,"gift":null,"cashLeastCost":null,"cashReduceCost":null,"discount":null,"masterCardId":null},"generalCouponDefaultDetail":"","grouponDealDetail":null,"gift":"","cashLeastCost":2,"cashReduceCost":1,"discount":0,"createTime":1469786621000,"checkPass":-1,"delFlag":null,"modifyTime":null,"coverShow":null,"isGoodsCoupon":null,"changeStock":null,"batchVerifyLimit":1,"cashOverlay":true},"customer":{"id":167020,"channel":1,"channelSerial":"ous64uFCCLMyXYDJ-MkNilyCI5CY","shopId":42,"createTime":1477636412000,"mobile":"17817738178","name":"fuyu","sex":1,"weixinNickname":"MrLai","headImgUrl":"http://wx.qlogo.cn/mmopen/JZnr5tqrZvdT3tvbobWgCKXdkUvJnaPrL5qs8HxWruHVzmvMj7NciamlgTP89ibKaGoLpxcW3el6Xs2Wrib8ovicSgPIZ6Kmk1UQ/0","lastUpdateTime":1480505627669,"customerGroupId":100,"groupName":null,"province":"广东","city":"深圳","subscribeTime":1477391385000,"balance":null,"bonus":null,"memberCount":null,"handoutStatus":null,"registerTime":1477636535000,"activeTime":null,"member":true},"serial":"101809100420","createTime":1480505628169,"getedSync":null,"channel":-1,"branchId":-1,"operatorId":0,"lakeUserId":null,"effectTime":null,"expireTime":null,"status":null,"baseInfo":null},"serialList":null,"success":true}
2016-11-30 19:33:44,322 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:46 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:44,322 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:44,323 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：success":true
2016-11-30 19:33:44,323 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:44,323 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:44,323 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:42",step_action="{'方法': 'post', '参数': '', 'url': '/kq/getincoupon/40758966216286146560/ous64uFCCLMyXYDJ-MkNilyCI5CY'}", expected_results="{'检查': 'body', '条件': [{'模式': 'success':true', '消息': 'success不为ture,领取卡券失败'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 126 AND step_id = 128 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:44,328 testcase.py[line: 158] INFO: 测试用例[id=126, name=test-n-免费领取优惠券]执行成功
2016-11-30 19:33:44,328 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:44,328 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:41" WHERE executed_history_id = 20161130193313 AND testcase_id = 126 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:44,446 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=126]的执行结果
2016-11-30 19:33:44,764 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:16:14', 'full_tc_external_id': 'wecharno-2', 'name': 'test-n-点击商品', 'updater_first_name': 'Testlink', 'testcase_id': '80', 'tc_external_id': '2', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 11:05:03', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '79', 'id': '81', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;立即购买&quot;,&quot;消息&quot;:&quot;点击商品时无法打开购买页面&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/item?&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:26838, &quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '82', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:44,890 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:44,890 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 80, 'test-n-点击商品', '微商城-模拟点击页面跳转', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:44,891 testplan.py[line: 72] INFO: 开始执行测试用例[id=80，name=test-n-点击商品]
2016-11-30 19:33:44,892 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}
2016-11-30 19:33:44,892 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}
2016-11-30 19:33:44,892 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:44,892 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 80, 'test-n-点击商品', 'plan1_of_wechatno', 'pj_wechatno', 82, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/goods/item?","参数":{"id":26838, "serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"立即购买","消息":"点击商品时无法打开购买页面"}]}', 'Block', '', '')
2016-11-30 19:33:44,893 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:44,893 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:44,893 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:44,893 casestep.py[line: 102] INFO: 转换后的参数体为：{'id': 26838, 'serial': '10549840601068216320'}
2016-11-30 19:33:44,893 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:44,894 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:44,894 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/item?id=26838&serial=10549840601068216320
2016-11-30 19:33:44,894 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:44,956 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:44,956 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": 





<!DOCTYPE html>
<link rel="stylesheet" href="/css/bind/banner.css?v=3.8.0-59cf5" />  
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
	<meta name="format-detection" content="telephone=no">
	<title>深圳云移</title>
	<link rel="stylesheet" href="/common/css/common-pc.css?v=3.8.0-59cf5">
	<link rel="stylesheet" href="/component/swiper/css/swiper.css?v=3.8.0-59cf5">
	<link rel="stylesheet" href="/css/malls/detail.css?v=3.8.0-59cf5">
</head>
<body>
	<div class="wrapper">

		<!-- banner滚图 -->
		<div class="banner j-banner">
			<div class="swiper-container j-swiper-container">
			  	<div class="swiper-wrapper j-swiper-wrappper"></div>
			</div>
			<div class="pagination"></div>
		</div>

		<!-- 详细商品信息 -->
		<div class="message j-message"></div>

		<!-- 已选 -->
		<div class="choice j-choice dn">
			<span class="key j-choice-key">请选择商品规格</span>
			<span class="value j-choice-value"></span>
			<i class="arrow"></i>
		</div>

		<!-- 图文详情 -->
		<div class="pic-detail j-pic-detail dn">
			<div class="bottom-details">
			</div>
		</div>

		<!-- 选择规格 -->
		<div class="specification j-specification">

			<div class="wrap j-wrap">
				<i class="close j-close"></i>
				<!-- 商品信息 -->
				<div class="mes-wrap">
					<div class="mes j-mes">
						<!-- <img src="" height="160" width="214" alt="" class="pic">
						<div class="describe">
							<h3 class="title">￥<span class="j-price">345</span></h3>
							<p class="text">爱上邓丽君可拉伸的房间爱老师肯定放假阿斯蒂芬阿斯蒂芬</p>
						</div> -->
					</div>
				</div>

				<div class="j-type-num">
					<!-- 规格选择 -->
					<!-- <div class="type">
						<h3 class="title">规格选择</h3>
						<ul class="lists j-type">
							<li data="22"class="item j-item" price="22">颜色</li>
						</ul>
					</div> -->

					<!-- 购买数量 -->
					<div class="num cf">
						<h3 class="title">购买数量</h3>
						<div class="box" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">
							<i class="reduce j-reduce" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">-</i><input type="text" class="text j-text" readonly value="1" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;"/><i class="add j-add" unselectable="on" style="-moz-user-select:none;-webkit-user-select:none;" onselectstart="return false;">+</i>
						</div>
					</div>
				</div>

				<!-- 确定按钮 -->
				<a class="sure j-sure">确定</a>
			</div>
		</div>

		<!-- 底部固定栏 -->
		<footer class="footer j-footer">
			<a href="/cart?serial=10549840601068216320" class="cart ">
				<span class="num j-cart-num"></span>
			</a>
			<span class="add-cart j-add-cart">加入购物车</span>
			<span class="buy buy-imdtly j-buy-imdtly">立即购买</span>
		</footer>

		<!-- 提示弹窗 -->
		<div class="popup j-popup">
			<p class="text j-tip-content"></p>
		</div>

	</div>
	<script type="text/javascript">
		// changed by huangtao
		var mallGoodStandardType = "", // 商品类型，1为单规格，2为双规格
			mallGoodsId = "",
			ctx = "",
			serial = "10549840601068216320";
	</script>

	<script src="/plugin/zepto/js/zepto.min.js?v=3.8.0-59cf5"></script>
	<script src="/common/js/request.js?v=3.8.0-59cf5"></script>
	<script src="/common/js/extend-number.js?v=3.8.0-59cf5"></script>
	<script src="/component/iscroll/js/iscroll.js?v=3.8.0-59cf5"></script>
	<script src="/component/swiper/js/swiper.min.js?v=3.8.0-59cf5"></script>
	<script src="/js/malls/detail.js?v=3.8.0-59cf5"></script>
</body>
</html>
2016-11-30 19:33:44,960 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:47 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Content-Length', '3931'), ('Connection', 'close'), ('Set-Cookie', 'JSESSIONID=0A8DEB7987B44CAA0611781712DD28CB; Path=/; HttpOnly'), ('Content-Language', 'en-US')]
2016-11-30 19:33:44,960 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:44,960 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：立即购买
2016-11-30 19:33:44,961 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:44,961 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:44,961 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:44",step_action="{'方法': 'get', '参数': {'id': 26838, 'serial': '10549840601068216320'}, 'url': '/goods/item?'}", expected_results="{'检查': 'body', '条件': [{'模式': '立即购买', '消息': '点击商品时无法打开购买页面'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 80 AND step_id = 82 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:44,964 testcase.py[line: 158] INFO: 测试用例[id=80, name=test-n-点击商品]执行成功
2016-11-30 19:33:44,964 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:44,964 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:44" WHERE executed_history_id = 20161130193313 AND testcase_id = 80 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:45,098 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=80]的执行结果
2016-11-30 19:33:45,345 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '2', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:17:12', 'full_tc_external_id': 'wecharno-1', 'name': 'test-n-显示默认页面', 'updater_first_name': 'Testlink', 'testcase_id': '76', 'tc_external_id': '1', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-18 15:52:00', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '75', 'id': '77', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t｛&ldquo;检查&rdquo;:&ldquo;BODY&rdquo;，</p>\n<p>\n\t&ldquo;匹配规则&rdquo;：&ldquo;包含字符串&rdquo;，</p>\n<p>\n\t&ldquo;条件&rdquo;：【｛&ldquo;模式&rdquo;：&ldquo;\\&quot;currentPage\\&quot;:1&rdquo;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝，｛&ldquo;模式&rdquo;：&ldquo;\\&quot;pageStartRow\\&quot;:0&quot;，&ldquo;消息&rdquo;：&ldquo;接口返回错误&rdquo;｝】</p>\n<p>\n\t｝</p>\n', 'execution_type': '2', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/goods/plist&quot;,<br />\n\t&quot;参数&quot;:{&quot;page_size&quot;:&quot;10&quot;,&quot;page_no&quot;:&quot;1&quot;,&quot;cateIds&quot;:&quot;&quot;,&quot;orderBy&quot;:&quot;&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;name&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '78', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:45,462 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:45,462 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 76, 'test-n-显示默认页面', '微商城-显示商品列表接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:45,463 testplan.py[line: 72] INFO: 开始执行测试用例[id=76，name=test-n-显示默认页面]
2016-11-30 19:33:45,463 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}
2016-11-30 19:33:45,464 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\"currentPage\":1","消息":"接口返回错误"},{"模式":"\"pageStartRow\":0","消息":"接口返回错误"}]}
2016-11-30 19:33:45,464 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:45,464 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 76, 'test-n-显示默认页面', 'plan1_of_wechatno', 'pj_wechatno', 78, 1, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"post","url":"/goods/plist","参数":{"page_size":"10","page_no":"1","cateIds":"","orderBy":"","serial":"[global_serial]","name":""}}', '{"检查":"BODY","匹配规则":"包含字符串","条件":[{"模式":"\\"currentPage\\":1","消息":"接口返回错误"},{"模式":"\\"pageStartRow\\":0","消息":"接口返回错误"}]}', 'Block', '', '')
2016-11-30 19:33:45,465 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:45,465 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:45,465 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:45,465 casestep.py[line: 102] INFO: 转换后的参数体为：{'page_no': '1', 'cateIds': '', 'page_size': '10', 'serial': '10549840601068216320', 'name': '', 'orderBy': ''}
2016-11-30 19:33:45,465 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:45,466 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:45,466 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/goods/plist
2016-11-30 19:33:45,466 httpprotocol.py[line: 75] INFO: 参数为：b'page_no=1&cateIds=&page_size=10&serial=10549840601068216320&name=&orderBy='
2016-11-30 19:33:45,466 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:45,759 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:45,759 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"dataList":[{"id":27066,"name":"多，1,1","privateSerial":null,"price":0,"oriPrice":0,"description":"123","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/25/870d7765-ac84-4b6a-bd86-0108cbe11fbc.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":302,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":1,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26942,"name":"lin测试","privateSerial":null,"price":0,"oriPrice":0,"description":"lin测试","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/10/31/54a9e36a-d950-4e0d-ba50-bf1e1c4bd347.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":278,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27065,"name":"ceshi","privateSerial":null,"price":100,"oriPrice":0,"description":"23414","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/25/a6eca60b-84d1-45b8-aa75-981e63870e19.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":278,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":129,"istop":0,"soldCount":3,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":3,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27064,"name":"一级规格","privateSerial":null,"price":100,"oriPrice":0,"description":"为二位","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/25/029c689e-0ece-4fe7-991f-494554e1170b.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":10,"istop":0,"soldCount":2,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":4,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27063,"name":"试下系统异常","privateSerial":null,"price":1200,"oriPrice":0,"description":"sdfsa","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/24/1c2a40e9-b541-48fe-baba-cbd0c726fe23.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":6,"istop":0,"soldCount":6,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":6,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27056,"name":"背心1","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/23/202647db-56de-43dc-bed7-484ea86e8160.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":67,"standardLowPrice":20.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27059,"name":"0A","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/file/2016/11/23/2d4d68bf-5060-4e6e-b97c-27c0c013149d.png","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":41,"standardLowPrice":20.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27057,"name":"裙子","privateSerial":null,"price":0,"oriPrice":0,"description":"1","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/13dbced7-faae-4e13-aebe-6f69d72dc7e0.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":88,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":27055,"name":"一级1123","privateSerial":null,"price":0,"oriPrice":0,"description":"阿萨德飞洒","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/23/5692de28-aa07-45e2-b3a7-5ef0b39c359b.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":301,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":3,"standardLowPrice":1.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},{"id":26983,"name":"衬衫","privateSerial":null,"price":0,"oriPrice":0,"description":"11111","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/11/25/e12cbd4b-56c5-4fcc-9c49-6b6bd829745b.jpg","shop":{"id":42,"serial":null,"parent":null,"phoneNumber":null,"email":null,"fullName":null,"name":null,"logoUrl":null,"printAdUrl":null,"printAdText":null,"createTime":null,"shopType":null,"sblist":null,"idlist":null,"shopAccount":null,"subShops":null,"account":null,"shopRole":null,"suffixShop":null,"thirdAppId":null},"shopId":null,"mallGoodsCate":{"id":297,"name":null,"delFlag":null,"shop":null,"orderNum":null,"branchId":null,"goodsAmount":0,"oldName":null,"goodsSoldOutAmount":0,"theFirst":false,"theLast":false},"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":2,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":76,"standardLowPrice":100.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false}],"pageInfo":{"pageSize":10,"currentPage":1,"totalPages":6,"totalRows":60,"pageStartRow":0,"pageEndRow":10,"pagination":true,"hasNextPage":true,"hasPreviousPage":false,"params":null,"needCount":true}}
2016-11-30 19:33:45,764 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:47 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:45,764 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:45,764 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："currentPage":1
2016-11-30 19:33:45,764 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："pageStartRow":0
2016-11-30 19:33:45,764 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:45,764 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:45,765 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:45",step_action="{'方法': 'post', '参数': {'page_no': '1', 'cateIds': '', 'page_size': '10', 'serial': '10549840601068216320', 'name': '', 'orderBy': ''}, 'url': '/goods/plist'}", expected_results="{'检查': 'BODY', '条件': [{'模式': ''currentPage':1', '消息': '接口返回错误'}, {'模式': ''pageStartRow':0', '消息': '接口返回错误'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 76 AND step_id = 78 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:45,768 testcase.py[line: 158] INFO: 测试用例[id=76, name=test-n-显示默认页面]执行成功
2016-11-30 19:33:45,769 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:45,769 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:45" WHERE executed_history_id = 20161130193313 AND testcase_id = 76 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:45,891 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=76]的执行结果
2016-11-30 19:33:46,143 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 18:05:21', 'full_tc_external_id': 'wecharno-5', 'name': 'test-n-把商品移出购物车', 'updater_first_name': 'Testlink', 'testcase_id': '93', 'tc_external_id': '5', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:25:46', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '91', 'id': '94', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;步骤类型&quot;:&quot;执行用例&quot;,</p>\n<p>\n\t&quot;用例id&quot;:88,</p>\n<p>\n\t&quot;用例名称&quot;:&quot;test-n-把商品加入购物车&quot;<br />\n\t}</p>\n<p>\n\t&nbsp;</p>\n', 'id': '95', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品移出购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cart/delfromcart?&quot;,<br />\n\t&quot;参数&quot;:{&quot;strIds&quot;:&quot;[CaseStep.strIds]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '96', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;[]&quot;,&quot;消息&quot;:&quot;把商品移出购物车中失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '178', 'active': '1', 'step_number': '3'}], 'active': '1'}]
2016-11-30 19:33:46,275 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:46,275 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 93, 'test-n-把商品移出购物车', '微商城-把商品移出购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:46,277 testplan.py[line: 72] INFO: 开始执行测试用例[id=93，name=test-n-把商品移出购物车]
2016-11-30 19:33:46,277 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} 
2016-11-30 19:33:46,277 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:46,277 testcase.py[line: 50] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:46,277 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 95, 1, '无', '无', '无', '无', '{"步骤类型":"执行用例","用例id":88,"用例名称":"test-n-把商品加入购物车"} ', '', 'Block', '', '')
2016-11-30 19:33:46,278 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:46,431 global_function.py[line: 19] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-29 17:58:09', 'full_tc_external_id': 'wecharno-4', 'name': 'test-n-把商品加入购物车', 'updater_first_name': 'Testlink', 'testcase_id': '88', 'tc_external_id': '4', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-20 12:07:40', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '87', 'id': '89', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;customer_id&quot;:1}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM customer WHERE channel_serial=%s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(\\&quot;[global_openId]\\&quot;,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '175', 'active': '1', 'step_number': '1'}, {'expected_results': '', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;更新&quot;:&quot;UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '174', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;匹配规则&quot;:&quot;键值相等&quot;,<br />\n\t&quot;条件&quot;:[{&quot;模式&quot;:{&quot;success&quot;:true}, &quot;消息&quot;:&quot;把商品加如购物车失败，success不为true&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/addtocart&quot;,<br />\n\t&quot;参数&quot;:{&quot;mallGoodsId&quot;:26838,&quot;standardId&quot;:&quot;undefined&quot;,&quot;amount&quot;:1,&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}</p>\n', 'id': '90', 'active': '1', 'step_number': '3'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;strIds&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.customer_id],1)&quot;</p>\n<p>\n\t}</p>\n', 'id': '176', 'active': '1', 'step_number': '4'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;\\&quot;amount\\&quot;:1&quot;,&quot;消息&quot;:&quot;购物车中商品总数错误&quot;}, {&quot;模式&quot;:&quot;\\&quot;id\\&quot;:26838&quot;,&quot;消息&quot;:&quot;购物车中商品缺失&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;方法&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/cartlist?&quot;,<br />\n\t&quot;参数&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '177', 'active': '1', 'step_number': '5'}], 'active': '1'}]
2016-11-30 19:33:46,578 global_function.py[line: 39] INFO: 正在读取套件[id=87]的协议，host，端口配置...
2016-11-30 19:33:46,908 global_function.py[line: 68] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:46,908 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', '把商品加入购物车接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:46,909 global_function.py[line: 71] INFO: 开始执行测试用例[id=88，name=test-n-把商品加入购物车]
2016-11-30 19:33:46,909 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\"[global_openId]\",)"}
2016-11-30 19:33:46,909 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"customer_id":1}}
2016-11-30 19:33:46,909 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:46,909 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 175, 1, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM customer WHERE channel_serial=%s","参数":"(\\"[global_openId]\\",)"}', '{"检查":"body","输出":{"customer_id":1}}', 'Block', '', '')
2016-11-30 19:33:46,911 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:46,911 casestep.py[line: 127] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:46,911 casestep.py[line: 136] INFO: 转换后的参数体为：("ous64uFCCLMyXYDJ-MkNilyCI5CY",)
2016-11-30 19:33:46,911 mydb.py[line: 84] INFO: query：SELECT id FROM customer WHERE channel_serial=%s  data：('ous64uFCCLMyXYDJ-MkNilyCI5CY',)
2016-11-30 19:33:46,914 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(167020,), flag:True
2016-11-30 19:33:46,914 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:46,914 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}, {'strIds': 18635}]
2016-11-30 19:33:46,914 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:46,915 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:46",step_action="{'参数': ('ous64uFCCLMyXYDJ-MkNilyCI5CY',), '单条查询': 'SELECT id FROM customer WHERE channel_serial=%s', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'customer_id': 1}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 175 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:46,917 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}
2016-11-30 19:33:46,917 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：
2016-11-30 19:33:46,918 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:46,918 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 174, 2, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","更新":"UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1","参数":"([CaseStep.customer_id],)"}', '', 'Block', '', '')
2016-11-30 19:33:46,919 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:46,919 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:33:46,919 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,)
2016-11-30 19:33:46,919 mydb.py[line: 70] INFO: query：UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = 167020 and closed=1
2016-11-30 19:33:47,331 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:47,331 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:46",step_action="{'更新': 'UPDATE mall_shopping_cart SET amount = 0 WHERE customer_id = %s and closed=1', '参数': (167020,), '步骤类型': '执行sql'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 174 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:47,338 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}
2016-11-30 19:33:47,339 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}
2016-11-30 19:33:47,339 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:47,340 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 90, 3, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"post","url":"/addtocart","参数":{"mallGoodsId":26838,"standardId":"undefined","amount":1,"serial":"[global_serial]","openId":"[global_openId]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品加如购物车失败,success不为true"}]}', 'Block', '', '')
2016-11-30 19:33:47,343 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:33:47,344 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:47,344 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:47,344 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:47,344 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'amount': 1, 'mallGoodsId': 26838, 'standardId': 'undefined', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:47,345 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:47,345 InterfaceUnittestTestCase.py[line: 30] INFO: 正在发起POST请求...
2016-11-30 19:33:47,346 httpprotocol.py[line: 74] INFO: 发起的请求为：http://m.test.saofu.cn:80/addtocart
2016-11-30 19:33:47,346 httpprotocol.py[line: 75] INFO: 参数为：b'serial=10549840601068216320&amount=1&mallGoodsId=26838&standardId=undefined&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY'
2016-11-30 19:33:47,346 httpprotocol.py[line: 76] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,026 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:48,027 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":1}
2016-11-30 19:33:48,027 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:48,028 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:48,028 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2016-11-30 19:33:48,028 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：True
2016-11-30 19:33:48,029 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:48,029 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,029 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:47",step_action="{'方法': 'post', '参数': {'serial': '10549840601068216320', 'amount': 1, 'mallGoodsId': 26838, 'standardId': 'undefined', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/addtocart'}", expected_results="{'检查': 'body', '条件': [{'模式': {'success': True}, '消息': '把商品加如购物车失败,success不为true'}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 90 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,037 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}
2016-11-30 19:33:48,038 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","输出":{"strIds":1}}
2016-11-30 19:33:48,038 testcase.py[line: 55] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:48,038 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 176, 4, '', '', '192.168.9.211', '3306', '{"步骤类型":"执行sql","单条查询":"SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1","参数":"([CaseStep.customer_id],1)"}', '{"检查":"body","输出":{"strIds":1}}', 'Block', '', '')
2016-11-30 19:33:48,042 testcase.py[line: 77] INFO: 开始执行步骤操作[第4步]
2016-11-30 19:33:48,042 casestep.py[line: 113] INFO: 找到待替换的非全局动态参数：[CaseStep.customer_id]
2016-11-30 19:33:48,043 casestep.py[line: 136] INFO: 转换后的参数体为：(167020,1)
2016-11-30 19:33:48,043 mydb.py[line: 84] INFO: query：SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1  data：(167020, 1)
2016-11-30 19:33:48,047 casestep.py[line: 188] INFO: 数据库服务器返回的查询结果为为 query_result:(18635,), flag:True
2016-11-30 19:33:48,048 casestep.py[line: 190] INFO: 正在保存服务器返回结果到自定义变量
2016-11-30 19:33:48,048 casestep.py[line: 225] INFO: 提取的输出结果(key-value对)为:[{'branch_id': 1485916418}, {'device_no': '182590014248006'}, {'serial_no': 'HZ501FZA0F9M07D'}, {'customer_id': 167020}, {'strIds': 18635}]
2016-11-30 19:33:48,049 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,049 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:48",step_action="{'参数': (167020, 1), '单条查询': 'SELECT id FROM mall_shopping_cart WHERE customer_id = %s and closed=%s ORDER BY id DESC LIMIT 1', '步骤类型': '执行sql'}", expected_results="{'检查': 'body', '输出': {'strIds': 1}}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 176 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,056 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:33:48,056 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\"amount\":1","消息":"购物车中商品总数错误"}, {"模式":"\"id\":26838","消息":"购物车中商品缺失"}]}
2016-11-30 19:33:48,056 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:48,056 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 88, 'test-n-把商品加入购物车', 'plan1_of_wechatno', 'pj_wechatno', 177, 5, '', 'http', 'm.test.saofu.cn', '80', '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"\\"amount\\":1","消息":"购物车中商品总数错误"}, {"模式":"\\"id\\":26838","消息":"购物车中商品缺失"}]}', 'Block', '', '')
2016-11-30 19:33:48,057 testcase.py[line: 77] INFO: 开始执行步骤操作[第5步]
2016-11-30 19:33:48,057 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:48,057 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:48,057 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:48,058 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,058 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:48,058 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:48,058 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=10549840601068216320&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:48,058 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,120 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:48,120 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": [{"id":18635,"customer":null,"mallGoods":{"id":26838,"name":"接口-测试商品1","privateSerial":null,"price":1,"oriPrice":0,"description":"接口测试专用,烦请勿删,勿操作","iconUrl":"http://res.test.saofu.cn/saofu/upload/image/2016/07/18/352c9a44-5fe7-4546-9786-563d8700a773.jpg,","shop":null,"shopId":null,"mallGoodsCate":null,"servicePhone":null,"createTime":null,"expirTime":null,"cannotUseTime":null,"useTime":null,"preRemind":null,"rules":null,"detail":null,"status":1,"branch":null,"transientPrice":0.0,"transientOriPrice":0.0,"cateId":0,"cwId":null,"skuQuantity":null,"istop":0,"soldCount":0,"delFlag":null,"standard":1,"relType":null,"relBranchList":null,"mallGoodsStandards":null,"soldAllCount":0,"standardLowPrice":0.0,"standardTopPrice":0.0,"standardAllSku":null,"outerId":null,"rank":null,"mallGoodsCatagoryId":null,"business":null,"baiduSyncStatus":null,"meituanSyncStatus":null,"elemeSyncStatus":null,"dishCount":null,"lunchBoxCount":null,"isSku":0,"cateName":null,"waimaiChannel":null,"goodsCopyId":null,"syncStatus":0,"hasActivity":0,"orderNum":0,"mallGoodsMultistageStandards":null,"mallGoodsStandard":null,"theFirst":false,"theLast":false},"mallGoodsStandard":null,"amount":1,"shop":null,"shopBranchId":null,"closed":null,"cateringType":null}]
2016-11-30 19:33:48,121 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:48,121 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:48,121 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："amount":1
2016-11-30 19:33:48,121 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为："id":26838
2016-11-30 19:33:48,121 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:48,122 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,122 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:48",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cartlist?'}", expected_results="{'检查': 'body', '条件': [{'模式': ''amount':1', '消息': '购物车中商品总数错误'}, {'模式': ''id':26838', '消息': '购物车中商品缺失'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 88 AND step_id = 177 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,126 testcase.py[line: 158] INFO: 测试用例[id=88, name=test-n-把商品加入购物车]执行成功
2016-11-30 19:33:48,126 global_function.py[line: 75] INFO: 正在更新用例执行结果
2016-11-30 19:33:48,126 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:46" WHERE executed_history_id = 20161130193313 and testcase_id = 88 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,129 global_function.py[line: 82] INFO: 指定用例[88]已执行完
2016-11-30 19:33:48,130 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,130 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="无", runtime="2016-11-30 19:33:46",step_action="{'用例名称': 'test-n-把商品加入购物车', '用例id': 88, '步骤类型': '执行用例'}", expected_results="" WHERE executed_history_id = 20161130193313 AND testcase_id = 93 AND step_id = 95 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,135 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cart/delfromcart?","参数":{"strIds":"[CaseStep.strIds]","serial":"[global_serial]"}}
2016-11-30 19:33:48,135 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品移出购物车失败,success不为true"}]}
2016-11-30 19:33:48,135 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:48,136 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 96, 2, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cart/delfromcart?","参数":{"strIds":"[CaseStep.strIds]","serial":"[global_serial]"}}', '{"检查":"body","匹配规则":"键值相等","条件":[{"模式":{"success":true}, "消息":"把商品移出购物车失败,success不为true"}]}', 'Block', '', '')
2016-11-30 19:33:48,138 testcase.py[line: 77] INFO: 开始执行步骤操作[第2步]
2016-11-30 19:33:48,139 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:48,139 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.strIds]
2016-11-30 19:33:48,139 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:48,139 casestep.py[line: 102] INFO: 转换后的参数体为：{'strIds': 18635, 'serial': '10549840601068216320'}
2016-11-30 19:33:48,139 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:48,140 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:48,140 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cart/delfromcart?strIds=18635&serial=10549840601068216320
2016-11-30 19:33:48,140 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,618 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:48,619 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": {"success":true,"message":null,"attach":null}
2016-11-30 19:33:48,619 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:48,619 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:48,619 unittesttestcase.py[line: 106] INFO: 要匹配的字典key,value层级为：['success', True]
2016-11-30 19:33:48,619 unittesttestcase.py[line: 109] INFO: 找到的对应字典层级的最后值为：True
2016-11-30 19:33:48,619 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:48,619 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,620 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:48",step_action="{'方法': 'get', '参数': {'strIds': 18635, 'serial': '10549840601068216320'}, 'url': '/cart/delfromcart?'}", expected_results="{'检查': 'body', '条件': [{'模式': {'success': True}, '消息': '把商品移出购物车失败,success不为true'}], '匹配规则': '键值相等'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 93 AND step_id = 96 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,624 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} 
2016-11-30 19:33:48,624 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"[]","消息":"把商品移出购物车中失败"}]}
2016-11-30 19:33:48,624 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:48,625 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 93, 'test-n-把商品移出购物车', 'plan1_of_wechatno', 'pj_wechatno', 178, 3, '', 'http', 'm.test.saofu.cn', 80, '{"方法":"get","url":"/cartlist?","参数":{"serial":"[global_serial]","openId":"[global_openId]"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"[]","消息":"把商品移出购物车中失败"}]}', 'Block', '', '')
2016-11-30 19:33:48,626 testcase.py[line: 77] INFO: 开始执行步骤操作[第3步]
2016-11-30 19:33:48,626 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_urlencode
2016-11-30 19:33:48,626 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_serial]
2016-11-30 19:33:48,627 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_openId]
2016-11-30 19:33:48,627 casestep.py[line: 102] INFO: 转换后的参数体为：{'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,627 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:48,627 InterfaceUnittestTestCase.py[line: 35] INFO: 正在发起GET请求...
2016-11-30 19:33:48,627 httpprotocol.py[line: 56] INFO: 发起的请求为：http://m.test.saofu.cn:80/cartlist?serial=10549840601068216320&openId=ous64uFCCLMyXYDJ-MkNilyCI5CY
2016-11-30 19:33:48,627 httpprotocol.py[line: 57] INFO: 请求头为：{'Cookie': '10549840601068216320=ous64uFCCLMyXYDJ-MkNilyCI5CY'}
2016-11-30 19:33:48,671 InterfaceUnittestTestCase.py[line: 40] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:48,671 InterfaceUnittestTestCase.py[line: 54] INFO: 服务器返回结果"响应体(body)": []
2016-11-30 19:33:48,671 InterfaceUnittestTestCase.py[line: 55] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:50 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:48,672 InterfaceUnittestTestCase.py[line: 56] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:48,672 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：[]
2016-11-30 19:33:48,672 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:48,672 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:48,672 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="get", runtime="2016-11-30 19:33:48",step_action="{'方法': 'get', '参数': {'serial': '10549840601068216320', 'openId': 'ous64uFCCLMyXYDJ-MkNilyCI5CY'}, 'url': '/cartlist?'}", expected_results="{'检查': 'body', '条件': [{'模式': '[]', '消息': '把商品移出购物车中失败'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 93 AND step_id = 178 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,677 testcase.py[line: 158] INFO: 测试用例[id=93, name=test-n-把商品移出购物车]执行成功
2016-11-30 19:33:48,677 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:48,677 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:46" WHERE executed_history_id = 20161130193313 AND testcase_id = 93 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:48,831 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=93]的执行结果
2016-11-30 19:33:49,114 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '3', 'status': '1', 'summary': '<p>\n\t消费不赠送积分,单规格商品</p>\n<p>\n\tulr中的40758966216286146560取自base_info.serial字段</p>\n', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-07-29 18:31:36', 'full_tc_external_id': 'wecharno-11', 'name': 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', 'updater_first_name': 'Testlink', 'testcase_id': '120', 'tc_external_id': '11', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-26 12:12:10', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '109', 'id': '121', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;success&quot;:1,&quot;output_arg1&quot;:&quot;CMOrder.attach&quot;}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CMOrder&quot;,<br />\n\t&quot;function&quot;:&quot;test_create_mall_order&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/cmorder/1/4&quot;,<br />\n\t&quot;params&quot;:{&quot;serial&quot;:&quot;[global_serial]&quot;,&quot;openId&quot;:&quot;[global_openId]&quot;,&quot;fm&quot;:1,&quot;mallGoodsId&quot;:&quot;26838&quot;, &quot;amount&quot;:2,&quot;cartIds&quot;:&quot;&quot;,&quot;fetchTime&quot;:&quot;&quot;, &quot;remark&quot;:&quot;&quot;}<br />\n\t}</p>\n', 'id': '122', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;button_name&quot;:&quot;确认支付&quot;, &quot;page_title&quot;:&quot;储值卡&quot;}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;Pay5&quot;,<br />\n\t&quot;function&quot;:&quot;test_pay5&quot;,<br />\n\t&quot;method&quot;:&quot;get&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/5?&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;serial&quot;:&quot;[global_serial]&quot;}<br />\n\t}</p>\n', 'id': '123', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{</p>\n<p>\n\t&quot;getByWeixin&quot;: 0, &quot;codeType&quot;: 2, &quot;title&quot;: &quot;动态校验&quot;, &quot;subTitle&quot;: &quot;动态校验&quot;, &quot;notice&quot;: &quot;动态校验&quot;, &quot;description&quot;: &quot;动态校验&quot;,&quot;useLimit&quot;:&quot;动态校验&quot;,&nbsp; &quot;dateInfoType&quot;: &quot;动态校验&quot;, &quot;cardType&quot;: 1,&quot;listing&quot;: 1, &quot;fitAll&quot;: 1,&quot;detailTxt&quot;: &quot;动态校验&quot;,&quot;servicePhone&quot;:&quot;动态校验&quot;,&quot;cashLeastCost&quot;: &quot;动态校验&quot;,&quot;cashReduceCost&quot;: &quot;动态校验&quot;,&quot;discount&quot;: 0,&quot;channel&quot;: -1,&quot;branchId&quot;: -1,&quot;success&quot;: 1, &quot;skuQuantity&quot;:&quot;动态校验&quot;,&quot;output_arg1&quot;:&quot;GetInCoupon.card_code&quot;</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;GetInCoupon&quot;,<br />\n\t&quot;function&quot;:&quot;test_get_in_coupon&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/kq/getincoupon/40758966216286146560/[global_openId]&quot;,<br />\n\t&quot;params&quot;:&quot;&quot;<br />\n\t}</p>\n', 'id': '124', 'active': '1', 'step_number': '3'}, {'expected_results': '<p>\n\t{&quot;success&quot;:1, &quot;receipt_fee&quot;:&quot;动态校验&quot;, &quot;balance&quot;:&quot;动态校验&quot;, &quot;bonus&quot;:&quot;动态校验&quot;, &quot;sum_amount_expend&quot;:&quot;动态校验&quot;,&nbsp; &quot;sum_bonus_expend&quot;:&quot;动态校验&quot;, &quot;balance_total&quot;:&quot;动态校验&quot;,&quot;coupon_weixin_verification_record&quot;:1}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{<br />\n\t&quot;class&quot;:&quot;CardPay&quot;,<br />\n\t&quot;function&quot;:&quot;test_account_pay_with_cash_discount&quot;,<br />\n\t&quot;method&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/pay/card/doconfirm&quot;,<br />\n\t&quot;params&quot;:{&quot;orderId&quot;:&quot;[var]&quot;, &quot;openId&quot;:&quot;[global_openId]&quot;, &quot;productOrderId&quot;:&quot;[CMOrder.attach]&quot;,&quot;customerId&quot;:&quot;[var]&quot;, &quot;type&quot;:1, &quot;cardId&quot;:&quot;&quot;,&quot;customerName&quot;:&quot;[var]&quot;, &quot;shopId&quot;:&quot;[var]&quot;, &quot;yhCardId&quot;:&quot;[GetInCoupon.card_code]&quot;,&quot;yhCardType&quot;:&quot;CASH&quot;}<br />\n\t}</p>\n', 'id': '129', 'active': '1', 'step_number': '4'}], 'active': '0'}]
2016-11-30 19:33:49,232 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:49,232 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 120, 'test-n-储值卡支付-仅使用代金券优惠，会员账户支付', '微商城-储值卡支付接口', 'plan1_of_wechatno', 'pj_wechatno', 'Block', '')
2016-11-30 19:33:49,233 testplan.py[line: 72] INFO: 开始执行测试用例[id=120，name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]
2016-11-30 19:33:49,233 testcase.py[line: 27] WARNING: 用例[name=test-n-储值卡支付-仅使用代金券优惠，会员账户支付]处于禁用状态[active=0]，不执行
2016-11-30 19:33:49,233 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:49,234 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Block", runtime="2016-11-30 19:33:49" WHERE executed_history_id = 20161130193313 AND testcase_id = 120 AND project='pj_wechatno' AND testplan='plan1_of_wechatno'
2016-11-30 19:33:49,356 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=74, bulid_version=v1.0.0],对应用例[testcase_id=120]的执行结果
2016-11-30 19:33:49,356 testplan.py[line: 97] INFO: 测试计划[project=pj_wechatno ,testplan=plan1_of_wechatno]已执行完
2016-11-30 19:33:49,470 main.py[line: 131] INFO: 正在读取测项目[id：145, project：pj_pos]的协议，host，端口配置...
2016-11-30 19:33:49,471 main.py[line: 134] INFO: 成功读取配置信息：{"protocol":"https","host":"saofu.client.test.saofu.cn","port":443}
2016-11-30 19:33:49,472 main.py[line: 150] INFO: 正在执行测试项目[id：145, project：pj_pos]
2016-11-30 19:33:49,472 testproject.py[line: 23] INFO: 正在获取测试项目[id：145, name：pj_pos]对应对应的测试计划名称列表
2016-11-30 19:33:49,612 testproject.py[line: 28] INFO: 成功获取项目测试计划名称列表[list=['plan1_of_pos']]
2016-11-30 19:33:49,773 testproject.py[line: 38] INFO: 正在执行项目测试计划[project：pj_pos，testplan：plan1_of_pos]
2016-11-30 19:33:49,773 testplan.py[line: 29] INFO: 正在获取测试计划[project=pj_pos，name=plan1_of_pos]的测试用例
2016-11-30 19:33:49,919 testplan.py[line: 35] INFO: 成功获取测试计划[project=pj_pos，name=plan1_of_pos]的测试用例id：dict_keys(['148', '152'])
2016-11-30 19:33:50,040 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '<p>\n\t初始化用例</p>\n', 'modification_ts': '2016-11-30 15:41:36', 'full_tc_external_id': 'pj_pos-1', 'name': 'test-n-登陆掌贝pos机', 'updater_first_name': 'Testlink', 'testcase_id': '148', 'tc_external_id': '1', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-27 18:32:10', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '147', 'id': '149', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;branch_id&quot;:1}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT branch_id FROM account_operator WHERE id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;(1318,)&quot;</p>\n<p>\n\t}</p>\n', 'id': '183', 'active': '1', 'step_number': '1'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,<br />\n\t&quot;输出&quot;:{&quot;device_no&quot;:1,&quot;serial_no&quot;:2}<br />\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{</p>\n<p>\n\t&quot;步骤类型&quot;:&quot;执行sql&quot;,</p>\n<p>\n\t&quot;单条查询&quot;:&quot;SELECT device_no, serial_no FROM device WHERE shop_branch_id = %s&quot;,</p>\n<p>\n\t&quot;参数&quot;:&quot;([CaseStep.branch_id],)&quot;</p>\n<p>\n\t}</p>\n', 'id': '182', 'active': '1', 'step_number': '2'}, {'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;：&quot;键值相等&quot;,</p>\n<p>\n\t&quot;条件&quot;：[{&quot;模式&quot;：{&quot;success&quot;:true}, &quot;消息&quot;：&ldquo;登录失败，success不为true&rdquo;},{&quot;模式&quot;：｛&quot;message&quot;: &quot;成功&quot;},&quot;消息&quot;：&ldquo;message不为成功&rdquo;}，{&quot;模式&quot;：｛&quot;code&quot;: &quot;4001&quot;},&quot;消息&quot;：&ldquo;code不为4001&rdquo;}],</p>\n<p>\n\t&quot;输出&quot;:{&quot;Token&quot;:{&quot;token&quot;:&quot;value&quot;},&quot;OperatorId&quot;:{&quot;operator&quot;:{&quot;id&quot;:&quot;value&quot;}}}</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t{&ldquo;函数&rdquo;：&ldquo;<span style="background-color:#e4e4ff;">test_interface_of_json</span>&rdquo;，</p>\n<p>\n\t&ldquo;请求头&rdquo;： {&quot;<span style="color:#008080;font-weight:bold;">DeviceId&quot;</span>:&quot;[CaseStep.device_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;SerialNo&quot;</span>:&quot;[CaseStep.serial_no]&quot;, <span style="color:#008080;font-weight:bold;">&quot;Content-Type&quot;</span>:&quot;<span style="color:#008080;font-weight:bold;">application/json;charset=utf-8&quot;</span>,<span style="color:#008080;font-weight:bold;">&quot;ProductVersion&quot;</span>: &quot;[global_product_version]&quot;, <span style="color:#008080;font-weight:bold;">&quot;ProtocolVersion&quot;</span>:&quot;[global_protocol_version]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/password/login&quot;,<br />\n\t&quot;参数&quot;:{&quot;id&quot;:&quot;1318&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;}<br />\n\t}</p>\n', 'id': '150', 'active': '1', 'step_number': '3'}], 'active': '1'}]
2016-11-30 19:33:50,040 testplan.py[line: 52] INFO: 用例[id=148, name=test-n-登陆掌贝pos机]为全局初始化用例，已跳过执行
2016-11-30 19:33:50,171 testplan.py[line: 45] INFO: 获取测试用例信息 [{'author_last_name': 'Administrator', 'execution_type': '1', 'layout': '1', 'estimated_exec_duration': '', 'node_order': '1000', 'status': '1', 'summary': '', 'is_open': '1', 'author_id': '1', 'preconditions': '', 'modification_ts': '2016-11-30 00:19:08', 'full_tc_external_id': 'pj_pos-2', 'name': 'test-n-修改积分', 'updater_first_name': 'Testlink', 'testcase_id': '152', 'tc_external_id': '2', 'author_first_name': 'Testlink', 'creation_ts': '2016-07-28 12:10:09', 'importance': '2', 'author_login': 'admin', 'testsuite_id': '151', 'id': '153', 'updater_login': 'admin', 'updater_id': '1', 'version': '1', 'updater_last_name': 'Administrator', 'steps': [{'expected_results': '<p>\n\t{&quot;检查&quot;:&quot;body&quot;,</p>\n<p>\n\t&quot;匹配规则&quot;:&quot;包含字符串&quot;,</p>\n<p>\n\t&quot;条件&quot;:[{&quot;模式&quot;:&quot;success\\&quot;:true&quot;, &quot;消息&quot;:&quot;修改积分失败&quot;}]</p>\n<p>\n\t}</p>\n', 'execution_type': '1', 'actions': '<p>\n\t<br />\n\t{&quot;函数&quot;：&quot;test_interface_of_json&quot;，</p>\n<p>\n\t&quot;请求头&quot;:{&quot;DeviceId&quot;:&quot;[CaseStep.device_no]&quot;, &quot;SerialNo&quot;:&quot;[CaseStep.serial_no]&quot;, &quot;Content-Type&quot;:&quot;application/json;charset=utf-8&quot;,&quot;ProductVersion&quot;:&quot;[global_product_version]&quot;,&quot;ProtocolVersion&quot;:&quot;[global_product_version]&quot;,&quot;OperatorId&quot;:&quot;[OperatorId]&quot;, &quot;Token&quot;:&quot;[Token]&quot;},</p>\n<p>\n\t&quot;方法&quot;:&quot;post&quot;,<br />\n\t&quot;url&quot;:&quot;/saofu-client/customer/customer_bonus_update_v3&quot;,<br />\n\t&quot;参数&quot;:{&quot;bonus&quot;:37593,&quot;code&quot;:&quot;17817738178&quot;}<br />\n\t}<br />\n\t&nbsp;</p>\n', 'id': '154', 'active': '1', 'step_number': '1'}], 'active': '1'}]
2016-11-30 19:33:50,302 testplan.py[line: 69] INFO: 记录测试用例到测试用例报表
2016-11-30 19:33:50,302 mydb.py[line: 56] INFO: query：INSERT INTO testcase_report_tb(executed_history_id, testcase_id, testcase_name, testsuit, testplan, project, runresult, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 152, 'test-n-修改积分', '扫码-修改积分接口', 'plan1_of_pos', 'pj_pos', 'Block', '')
2016-11-30 19:33:50,304 testplan.py[line: 72] INFO: 开始执行测试用例[id=152，name=test-n-修改积分]
2016-11-30 19:33:50,304 testcase.py[line: 39] INFO: 转换来自test_link 的step_action值为：{"函数":"test_interface_of_json","请求头":{"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion":"[global_product_version]","ProtocolVersion":"[global_product_version]","OperatorId":"[OperatorId]", "Token":"[Token]"},"方法":"post","url":"/saofu-client/customer/customer_bonus_update_v3","参数":{"bonus":37593,"code":"17817738178"}} 
2016-11-30 19:33:50,304 testcase.py[line: 41] INFO: 转换来自test_link 的expected_results值为：{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\":true", "消息":"修改积分失败"}]}
2016-11-30 19:33:50,304 testcase.py[line: 60] INFO: 记录测试步骤到测试步骤报告表
2016-11-30 19:33:50,304 mydb.py[line: 56] INFO: query：INSERT INTO case_step_report_tb(executed_history_id, testcase_id, testcase_name, testplan, project, step_id, step_num, protocol_method, protocol, host, port, step_action, expected_results, runresult, reason, runtime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('20161130193313', 152, 'test-n-修改积分', 'plan1_of_pos', 'pj_pos', 154, 1, '', 'https', 'saofu.client.test.saofu.cn', 443, '{"函数":"test_interface_of_json","请求头":{"DeviceId":"[CaseStep.device_no]", "SerialNo":"[CaseStep.serial_no]", "Content-Type":"application/json;charset=utf-8","ProductVersion":"[global_product_version]","ProtocolVersion":"[global_product_version]","OperatorId":"[OperatorId]", "Token":"[Token]"},"方法":"post","url":"/saofu-client/customer/customer_bonus_update_v3","参数":{"bonus":37593,"code":"17817738178"}} ', '{"检查":"body","匹配规则":"包含字符串","条件":[{"模式":"success\\":true", "消息":"修改积分失败"}]}', 'Block', '', '')
2016-11-30 19:33:50,305 testcase.py[line: 77] INFO: 开始执行步骤操作[第1步]
2016-11-30 19:33:50,305 casestep.py[line: 158] INFO: 调用的方法为：InterfaceUnittestTestCase.test_interface_of_json
2016-11-30 19:33:50,305 casestep.py[line: 102] INFO: 转换后的参数体为：{'code': '17817738178', 'bonus': 37593}
2016-11-30 19:33:50,306 casestep.py[line: 108] INFO: 没找到需要替换的动态参数
2016-11-30 19:33:50,306 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_product_version]
2016-11-30 19:33:50,306 casestep.py[line: 93] INFO: 找到待替换的全局动态参数：[global_product_version]
2016-11-30 19:33:50,306 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[Token]
2016-11-30 19:33:50,306 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.device_no]
2016-11-30 19:33:50,306 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[OperatorId]
2016-11-30 19:33:50,306 casestep.py[line: 79] INFO: 找到待替换的非全局动态参数：[CaseStep.serial_no]
2016-11-30 19:33:50,306 casestep.py[line: 102] INFO: 转换后的参数体为：{'ProtocolVersion': '3.2.12C', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'Token': '79b87bf3-1b29-498c-9586-9856899e0409', 'DeviceId': '182590014248006', 'OperatorId': 1318, 'SerialNo': 'HZ501FZA0F9M07D'}
2016-11-30 19:33:50,306 InterfaceUnittestTestCase.py[line: 91] INFO: 正在发起POST请求...
2016-11-30 19:33:50,307 httpprotocol.py[line: 74] INFO: 发起的请求为：https://saofu.client.test.saofu.cn:443/saofu-client/customer/customer_bonus_update_v3
2016-11-30 19:33:50,307 httpprotocol.py[line: 75] INFO: 参数为：b'{"code": "17817738178", "bonus": 37593}'
2016-11-30 19:33:50,307 httpprotocol.py[line: 76] INFO: 请求头为：{'ProtocolVersion': '3.2.12C', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'Token': '79b87bf3-1b29-498c-9586-9856899e0409', 'SerialNo': 'HZ501FZA0F9M07D', 'DeviceId': '182590014248006', 'OperatorId': 1318}
2016-11-30 19:33:51,360 InterfaceUnittestTestCase.py[line: 101] INFO: 正在对服务器返回body进行解码
2016-11-30 19:33:51,361 InterfaceUnittestTestCase.py[line: 115] INFO: 服务器返回结果"响应体(body)": {"bonus":37593,"code":"4001","success":true}
2016-11-30 19:33:51,361 InterfaceUnittestTestCase.py[line: 116] INFO: 服务器返回结果"请求头(headers)": [('Server', 'nginx/1.8.0'), ('Date', 'Wed, 30 Nov 2016 11:33:53 GMT'), ('Content-Type', 'application/json;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'close'), ('Vary', 'Accept-Encoding')]
2016-11-30 19:33:51,362 InterfaceUnittestTestCase.py[line: 117] INFO: 服务器返回结果"状态码(code)": 200
2016-11-30 19:33:51,363 unittesttestcase.py[line: 64] INFO: 要匹配的模式（子字符串）为：success":true
2016-11-30 19:33:51,364 unittesttestcase.py[line: 292] WARNING: 未检测到从服务器返回中提取内容的要求，请检查是否正确填写预期结果
2016-11-30 19:33:51,365 testcase.py[line: 155] INFO: 正在更新步骤执行结果
2016-11-30 19:33:51,366 mydb.py[line: 70] INFO: query：UPDATE case_step_report_tb SET runresult="Pass",reason="", protocol_method="post", runtime="2016-11-30 19:33:50",step_action="{'方法': 'post', '函数': 'test_interface_of_json', '请求头': {'ProtocolVersion': '3.2.12C', 'Content-Type': 'application/json;charset=utf-8', 'ProductVersion': '3.2.12C', 'Token': '79b87bf3-1b29-498c-9586-9856899e0409', 'DeviceId': '182590014248006', 'OperatorId': 1318, 'SerialNo': 'HZ501FZA0F9M07D'}, '参数': {'code': '17817738178', 'bonus': 37593}, 'url': '/saofu-client/customer/customer_bonus_update_v3'}", expected_results="{'检查': 'body', '条件': [{'模式': 'success':true', '消息': '修改积分失败'}], '匹配规则': '包含字符串'}" WHERE executed_history_id = 20161130193313 AND testcase_id = 152 AND step_id = 154 AND project='pj_pos' AND testplan='plan1_of_pos'
2016-11-30 19:33:51,384 testcase.py[line: 158] INFO: 测试用例[id=152, name=test-n-修改积分]执行成功
2016-11-30 19:33:51,384 testplan.py[line: 76] INFO: 正在更新用例执行结果
2016-11-30 19:33:51,385 mydb.py[line: 70] INFO: query：UPDATE testcase_report_tb SET runresult="Pass", runtime="2016-11-30 19:33:50" WHERE executed_history_id = 20161130193313 AND testcase_id = 152 AND project='pj_pos' AND testplan='plan1_of_pos'
2016-11-30 19:33:51,508 testplan.py[line: 87] INFO: 正在更新testlink上测试计划[testplan_id=146, bulid_version=v1.0.0],对应用例[testcase_id=152]的执行结果
2016-11-30 19:33:51,651 testplan.py[line: 97] INFO: 测试计划[project=pj_pos ,testplan=plan1_of_pos]已执行完
2016-11-30 19:33:51,651 main.py[line: 242] INFO: 接口测试已执行完成，正在关闭数据库连接
2016-11-30 19:33:51,652 htmlreporter.py[line: 37] INFO: 正在查询测试用例总数
2016-11-30 19:33:51,652 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE executed_history_id = %s  data：('20161130193313',)
2016-11-30 19:33:51,654 htmlreporter.py[line: 43] INFO: 正在查询执行通过的用例数
2016-11-30 19:33:51,654 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Pass', '20161130193313')
2016-11-30 19:33:51,655 htmlreporter.py[line: 49] INFO: 正在查询执行失败的用例数
2016-11-30 19:33:51,656 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Fail', '20161130193313')
2016-11-30 19:33:51,657 htmlreporter.py[line: 55] INFO: 正在查询执行出错的用例数
2016-11-30 19:33:51,657 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Error', '20161130193313')
2016-11-30 19:33:51,658 htmlreporter.py[line: 61] INFO: 正在查询未执行的用例数
2016-11-30 19:33:51,659 mydb.py[line: 84] INFO: query：SELECT count(testcase_id) FROM testcase_report_tb WHERE runresult = %s AND executed_history_id = %s  data：('Block', '20161130193313')
2016-11-30 19:33:51,660 htmlreporter.py[line: 88] INFO: 正在查询已运的测试计划
2016-11-30 19:33:51,660 mydb.py[line: 100] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20161130193313',)
2016-11-30 19:33:51,662 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]的测试用例执行结果
2016-11-30 19:33:51,662 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20161130193313')
2016-11-30 19:33:51,664 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_pos, testplan：无计划]的测试用例运行结果到测试报告
2016-11-30 19:33:51,665 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例执行结果
2016-11-30 19:33:51,665 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20161130193313')
2016-11-30 19:33:51,668 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]的测试用例运行结果到测试报告
2016-11-30 19:33:51,669 htmlreporter.py[line: 114] INFO: 正在查询测试计划[project：pj_pos, testplan：plan1_of_pos]的测试用例执行结果
2016-11-30 19:33:51,669 mydb.py[line: 100] INFO: query：SELECT id, executed_history_id, testcase_id, testcase_name,testsuit, testplan, project, runresult, runtime FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', 'plan1_of_pos', '20161130193313')
2016-11-30 19:33:51,672 htmlreporter.py[line: 121] INFO: 正在记录测试测试计划[project：pj_pos, testplan：plan1_of_pos]的测试用例运行结果到测试报告
2016-11-30 19:33:51,672 htmlreporter.py[line: 135] INFO: 正在查询已运的测试计划
2016-11-30 19:33:51,672 mydb.py[line: 100] INFO: query：SELECT project, testplan FROM testcase_report_tb WHERE executed_history_id = %s GROUP BY project, testplan ORDER BY id ASC  data：('20161130193313',)
2016-11-30 19:33:51,675 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_pos, testplan：无计划]已运行的测试用例
2016-11-30 19:33:51,675 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', '无计划', '20161130193313')
2016-11-30 19:33:51,677 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=148]步骤运行结果
2016-11-30 19:33:51,677 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', '无计划', 148, '20161130193313')
2016-11-30 19:33:51,681 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_wechatno, testplan：plan1_of_wechatno]已运行的测试用例
2016-11-30 19:33:51,681 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_wechatno', 'plan1_of_wechatno', '20161130193313')
2016-11-30 19:33:51,684 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=114]步骤运行结果
2016-11-30 19:33:51,684 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 114, '20161130193313')
2016-11-30 19:33:51,687 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=106]步骤运行结果
2016-11-30 19:33:51,687 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 106, '20161130193313')
2016-11-30 19:33:51,689 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=110]步骤运行结果
2016-11-30 19:33:51,690 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 110, '20161130193313')
2016-11-30 19:33:51,692 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=88]步骤运行结果
2016-11-30 19:33:51,692 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 88, '20161130193313')
2016-11-30 19:33:51,697 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=102]步骤运行结果
2016-11-30 19:33:51,697 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 102, '20161130193313')
2016-11-30 19:33:51,700 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=98]步骤运行结果
2016-11-30 19:33:51,700 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 98, '20161130193313')
2016-11-30 19:33:51,702 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=126]步骤运行结果
2016-11-30 19:33:51,702 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 126, '20161130193313')
2016-11-30 19:33:51,705 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=80]步骤运行结果
2016-11-30 19:33:51,705 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 80, '20161130193313')
2016-11-30 19:33:51,707 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=76]步骤运行结果
2016-11-30 19:33:51,708 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 76, '20161130193313')
2016-11-30 19:33:51,711 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=93]步骤运行结果
2016-11-30 19:33:51,711 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 93, '20161130193313')
2016-11-30 19:33:51,715 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=120]步骤运行结果
2016-11-30 19:33:51,715 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_wechatno', 'plan1_of_wechatno', 120, '20161130193313')
2016-11-30 19:33:51,717 htmlreporter.py[line: 147] INFO: 正在查询测试计划[project：pj_pos, testplan：plan1_of_pos]已运行的测试用例
2016-11-30 19:33:51,718 mydb.py[line: 100] INFO: query：SELECT testcase_id, testcase_name, project, testplan FROM testcase_report_tb WHERE project=%s AND testplan=%s AND executed_history_id = %s  GROUP BY testcase_id ORDER BY id ASC  data：('pj_pos', 'plan1_of_pos', '20161130193313')
2016-11-30 19:33:51,719 htmlreporter.py[line: 178] INFO: 正在查询测试用例[id=152]步骤运行结果
2016-11-30 19:33:51,720 mydb.py[line: 100] INFO: query：SELECT step_id, step_num, protocol_method, protocol, HOST, PORT, step_action, expected_results, runresult, reason, runtime FROM case_step_report_tb WHERE project= %s AND testplan= %s AND testcase_id = %s AND executed_history_id = %s GROUP BY step_num ORDER BY step_num ASC  data：('pj_pos', 'plan1_of_pos', 152, '20161130193313')
2016-11-30 19:33:51,722 htmlreporter.py[line: 207] INFO: 正在设置测试报告结果文件名
2016-11-30 19:33:51,722 htmlreporter.py[line: 217] INFO: 测试报告文件名所在路径为：E:\\Projects\\report\\test_report20161130193313.html
2016-11-30 19:33:51,722 htmlreporter.py[line: 210] INFO: 正在生成测试报告
2016-11-30 19:33:51,756 main.py[line: 265] INFO: 生成测试报告成功
2016-11-30 19:33:51,874 main.py[line: 272] INFO: E:\\Projects\\report\\test_report20161130193313.html
2016-11-30 19:33:51,874 main.py[line: 275] INFO: 正在发送测试报告邮件...
2016-11-30 19:33:52,500 main.py[line: 279] INFO: 发送邮件成功
